/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-02-18 17:08:26.475643
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[1]);
x1=IKsin(j[3]);
x2=IKsin(j[1]);
x3=IKcos(j[3]);
x4=IKsin(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[2]);
x7=IKsin(j[4]);
x8=IKcos(j[0]);
x9=IKsin(j[0]);
x10=((9.10415855677118e-6)*x0);
x11=((0.51401)*x9);
x12=((1.1e-7)*x3);
x13=((1.0)*x4);
x14=((1.0)*x1);
x15=((0.04601748)*x9);
x16=((0.999999999958557)*x1);
x17=((0.999999999958557)*x4);
x18=((0.04601748)*x0);
x19=((0.04601748)*x1);
x20=((0.00025)*x0);
x21=((1.0)*x0);
x22=((0.07042834)*x1);
x23=((0.999999999958557)*x8);
x24=((9.10415855677118e-6)*x9);
x25=((0.51401)*x0);
x26=((0.999999999958557)*x9);
x27=((9.10415855677118e-6)*x4);
x28=((9.10415855677118e-6)*x8);
x29=((0.999999999958557)*x0);
x30=(x4*x8);
x31=(x1*x2);
x32=(x2*x6);
x33=(x2*x3);
x34=(x6*x9);
x35=(x2*x9);
x36=(x6*x8);
x37=(x4*x9);
x38=(x2*x8);
x39=(x0*x3);
x40=(x13*x8);
x41=(x0*x37);
x42=(x0*x36);
x43=((1.0)*x33*x9);
x44=(x34+(((-1.0)*x0*x40)));
x45=(x36+x41);
x46=(((x21*x36))+((x13*x9)));
x47=(x1*x44);
x48=(x1*x45);
x49=(((x7*(((((-1.0)*x21*x3))+(((-1.0)*x13*x31))))))+(((-1.0)*x32*x5)));
eerot[0]=(((x5*((((x29*x3))+((x16*x2*x4))))))+(((-1.0)*x27*x33))+((x1*x10))+(((-0.999999999958557)*x32*x7)));
eerot[1]=((((9.10415855677118e-6)*x32*x7))+((x0*x16))+((x5*(((((-1.0)*x27*x31))+(((-1.0)*x10*x3))))))+(((-1.0)*x17*x33)));
eerot[2]=x49;
IkReal x50=(x2*x4);
eetrans[0]=((-0.00945)+(((-1.0)*j[5]*x49))+((x0*x12))+(((0.04601748)*x32*x7))+((x1*x25))+((x7*(((((0.07042834)*x39))+((x22*x50))))))+(((1.1e-7)*x31*x4))+x20+((x5*(((((-1.0)*x18*x3))+(((-1.0)*x19*x50))))))+(((-0.51401)*x33*x4))+(((0.07042834)*x32*x5))+(((0.00025)*x32))+(((0.078)*x50)));
eerot[3]=(((x28*x31))+((x3*((((x10*x30))+(((-1.0)*x24*x6))))))+((x5*((((x23*x33))+((x16*x44))))))+((x7*((((x17*x9))+((x0*x23*x6)))))));
eerot[4]=(((x5*(((((-9.10415855677118e-6)*x47))+(((-1.0)*x28*x33))))))+((x16*x38))+((x7*(((((-1.0)*x10*x36))+(((-1.0)*x24*x4))))))+((x3*((((x0*x17*x8))+(((-1.0)*x26*x6)))))));
eerot[5]=(((x46*x5))+((x7*(((((-1.0)*x14*x44))+(((-1.0)*x33*x8)))))));
IkReal x51=((1.0)*x36);
IkReal x52=(x0*x30);
IkReal x53=(x33*x8);
eetrans[1]=((((-0.078)*x52))+((j[5]*((((x7*((x47+x53))))+(((-1.0)*x46*x5))))))+((x7*((((x22*x44))+(((0.07042834)*x53))))))+(((0.51401)*x31*x8))+((x7*(((((-1.0)*x18*x51))+(((-1.0)*x15*x4))))))+((x5*(((((-0.07042834)*x42))+(((-0.07042834)*x37))))))+(((-0.00025)*x37))+(((0.078)*x34))+((x1*(((((-1.1e-7)*x52))+(((1.1e-7)*x34))))))+(((-1.0)*x20*x51))+((x12*x38))+((x3*(((((-1.0)*x11*x6))+((x25*x30))))))+(((0.1515)*x9))+((x5*(((((-1.0)*x19*x44))+(((-0.04601748)*x53))))))+(((0.00025)*x38)));
IkReal x54=((1.0)*x26);
eerot[6]=(((x3*(((((-1.0)*x10*x37))+(((-1.0)*x28*x6))))))+((x5*(((((-1.0)*x33*x54))+((x16*x45))))))+(((-1.0)*x24*x31))+((x7*(((((-1.0)*x0*x54*x6))+((x17*x8)))))));
eerot[7]=(((x3*(((((-1.0)*x0*x17*x9))+(((-1.0)*x23*x6))))))+((x7*((((x10*x34))+(((-1.0)*x27*x8))))))+((x5*(((((-9.10415855677118e-6)*x48))+((x24*x33))))))+(((-1.0)*x16*x35)));
eerot[8]=(((x5*((x40+(((-1.0)*x21*x34))))))+((x7*(((((-1.0)*x14*x45))+x43)))));
IkReal x55=((1.0)*x11);
IkReal x56=(x0*x34);
eetrans[2]=((0.084603)+((x7*(((((-0.07042834)*x33*x9))+((x22*x45))))))+((x20*x34))+(((-1.0)*x12*x35))+((x1*(((((1.1e-7)*x36))+(((1.1e-7)*x41))))))+((x7*(((((-0.04601748)*x30))+((x0*x15*x6))))))+(((-1.0)*x31*x55))+((x5*((((x15*x33))+(((-1.0)*x19*x45))))))+(((-0.00025)*x30))+(((-0.00025)*x35))+(((0.078)*x36))+((x3*(((((-1.0)*x0*x4*x55))+(((-0.51401)*x36))))))+(((0.078)*x41))+((x5*(((((-0.07042834)*x30))+(((0.07042834)*x56))))))+(((0.1515)*x8))+((j[5]*((((x7*(((((-1.0)*x43))+x48))))+((x5*(((((-1.0)*x40))+x56)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j7,cj7,sj7,htj7,j7mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij7[2], _nj7;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.999999999958557)*r21))+(((-9.10415855677118e-6)*r20)));
new_r01=((((-0.999999999958557)*r20))+(((9.10415855677118e-6)*r21)));
new_r02=((-1.0)*r22);
new_px=((-0.084603)+pz+(((0.0460125181406379)*r20))+(((-0.545010418927848)*r21)));
new_r10=((((-9.10415855677118e-6)*r10))+(((-0.999999999958557)*r11)));
new_r11=((((-0.999999999958557)*r10))+(((9.10415855677118e-6)*r11)));
new_r12=((-1.0)*r12);
new_py=((((-0.545010418927848)*r11))+py+(((0.0460125181406379)*r10)));
new_r20=((((9.10415855677118e-6)*r00))+(((0.999999999958557)*r01)));
new_r21=((((-9.10415855677118e-6)*r01))+(((0.999999999958557)*r00)));
new_r22=r02;
new_pz=((-0.00945)+(((-0.0460125181406379)*r00))+(((-1.0)*px))+(((0.545010418927848)*r01)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x60=(htj3*npx);
IkReal x61=((0.078)*r10);
IkReal x62=((0.031)*htj3);
IkReal x63=htj3*htj3;
IkReal x64=((0.5)*r10);
IkReal x65=((0.156)*r00);
IkReal x66=((0.156)*r20);
IkReal x67=(htj3*r00);
IkReal x68=(htj3*r10);
IkReal x69=((1.0)*r00);
IkReal x70=((0.0735)*x67);
IkReal x71=((0.00025)*htj3*r20);
IkReal x72=((1.0)*x67);
IkReal x73=((0.147)*x68);
IkReal x74=((2.0)*x68);
IkReal x75=((0.001)*x67);
IkReal x76=((0.0005)*x68);
IkReal x77=(r00*x63);
IkReal x78=(x63*x64);
IkReal x79=((((-1.0)*x76))+x66);
IkReal x80=(((r20*x63))+(((-1.0)*r20)));
IkReal x81=((((-1.0)*x73))+x65);
IkReal x82=(x61+x62);
IkReal x83=(x60+x61);
IkReal x84=((((-1.0)*x73))+(((-1.0)*x65)));
IkReal x85=(x76+x66);
IkReal x86=(x71+x70);
IkReal x87=((((-1.0)*x74))+r00+(((-1.0)*x63*x69)));
IkReal x88=((((-1.0)*x74))+x77+(((-1.0)*x69)));
IkReal x89=((((-1.0)*x78))+x64+x67);
IkReal x90=(x78+x67+(((-1.0)*x64)));
IkReal x91=((((-1.0)*x72))+x78+(((-1.0)*x64)));
IkReal x92=((((-1.0)*x72))+(((-1.0)*x78))+x64);
IkReal x93=((((-1.0)*x70))+x71+x83+(((-1.0)*x62)));
IkReal x94=(x60+(((-1.0)*x86))+(((-1.0)*x82)));
IkReal x95=(x60+x86+(((-1.0)*x82)));
IkReal x96=((((-1.0)*x71))+x70+x83+(((-1.0)*x62)));
IkReal gconst0=x93;
IkReal gconst1=x79;
IkReal gconst2=x94;
IkReal gconst3=x91;
IkReal gconst4=x80;
IkReal gconst5=x92;
IkReal gconst6=x93;
IkReal gconst7=x79;
IkReal gconst8=x94;
IkReal gconst9=x91;
IkReal gconst10=x80;
IkReal gconst11=x92;
IkReal gconst12=x84;
IkReal gconst13=x75;
IkReal gconst14=x81;
IkReal gconst15=x87;
IkReal gconst16=x88;
IkReal gconst17=x84;
IkReal gconst18=x75;
IkReal gconst19=x81;
IkReal gconst20=x87;
IkReal gconst21=x88;
IkReal gconst22=x95;
IkReal gconst23=x85;
IkReal gconst24=x96;
IkReal gconst25=x89;
IkReal gconst26=x80;
IkReal gconst27=x90;
IkReal gconst28=x95;
IkReal gconst29=x85;
IkReal gconst30=x96;
IkReal gconst31=x89;
IkReal gconst32=x80;
IkReal gconst33=x90;
IkReal x97=((1.0)*gconst27);
IkReal x98=(gconst28*gconst33);
IkReal x99=(gconst23*gconst29);
IkReal x100=(gconst15*gconst24);
IkReal x101=(gconst24*gconst25);
IkReal x102=(gconst17*gconst33);
IkReal x103=(gconst5*gconst9);
IkReal x104=(gconst30*gconst31);
IkReal x105=(gconst16*gconst22);
IkReal x106=(gconst5*gconst6);
IkReal x107=(gconst21*gconst28);
IkReal x108=((1.0)*gconst1);
IkReal x109=(gconst22*gconst27);
IkReal x110=(gconst20*gconst30);
IkReal x111=(gconst18*gconst31);
IkReal x112=(gconst2*gconst3);
IkReal x113=(gconst11*gconst17);
IkReal x114=(gconst14*gconst25);
IkReal x115=((1.0)*gconst9);
IkReal x116=((1.0)*gconst11);
IkReal x117=(gconst2*gconst4);
IkReal x118=((1.0)*gconst10);
IkReal x119=(gconst24*gconst26);
IkReal x120=((1.0)*gconst32);
IkReal x121=(gconst15*gconst2);
IkReal x122=(gconst1*gconst10);
IkReal x123=(gconst7*gconst9);
IkReal x124=(gconst14*gconst4);
IkReal x125=(gconst0*gconst8);
IkReal x126=(gconst19*gconst31);
IkReal x127=(gconst29*gconst31);
IkReal x128=(gconst14*gconst26);
IkReal x129=((1.0)*gconst0);
IkReal x130=(gconst20*gconst5);
IkReal x131=(gconst23*gconst32);
IkReal x132=(gconst16*gconst6);
IkReal x133=(gconst14*gconst3);
IkReal x134=(gconst11*gconst6);
IkReal x135=(gconst6*x112);
IkReal x136=(gconst27*gconst28*gconst32);
op[0]=((((-1.0)*gconst31*x97*x99))+((x101*x98))+((gconst27*gconst28*x131))+(((-1.0)*x101*x104))+((x104*x109))+((x119*x127))+(((-1.0)*gconst22*x97*x98))+(((-1.0)*gconst28*x119*x120)));
op[1]=(((x100*x98))+((x111*x119))+(((-1.0)*gconst20*x97*x99))+((gconst20*gconst29*x119))+((x114*x98))+((x109*x110))+((gconst17*gconst27*x131))+(((-1.0)*x101*x126))+((x109*x126))+(((-1.0)*gconst17*x119*x120))+((gconst13*x136))+(((-1.0)*x101*x110))+(((-1.0)*gconst22*x107*x97))+(((-1.0)*gconst13*x127*x97))+(((-1.0)*gconst12*x97*x98))+(((-1.0)*gconst22*x102*x97))+(((-1.0)*x100*x104))+((gconst12*gconst27*x104))+((x104*x105))+(((-1.0)*gconst23*x111*x97))+(((-1.0)*gconst28*x120*x128))+(((-1.0)*gconst16*gconst31*x99))+(((-1.0)*x104*x114))+((x101*x102))+((x101*x107))+((x127*x128))+(((-1.0)*x105*x98))+((gconst16*gconst28*x131)));
op[2]=(((gconst14*gconst18*gconst26*gconst31))+(((-1.0)*gconst24*gconst28*gconst32*gconst4))+(((-1.0)*gconst15*gconst19*gconst24*gconst31))+((gconst19*gconst20*gconst22*gconst27))+((gconst13*gconst17*gconst27*gconst32))+((gconst22*gconst27*gconst31*gconst8))+((gconst10*gconst23*gconst27*gconst28))+((gconst11*gconst24*gconst25*gconst28))+(((-1.0)*gconst16*gconst20*gconst23*gconst29))+(((-1.0)*gconst2*gconst26*gconst28*gconst32))+((gconst16*gconst19*gconst22*gconst31))+(((-1.0)*gconst14*gconst20*gconst25*gconst30))+(((-1.0)*gconst23*gconst27*gconst29*gconst9))+((gconst17*gconst21*gconst24*gconst25))+((gconst15*gconst17*gconst24*gconst33))+(((-1.0)*gconst17*gconst21*gconst22*gconst27))+((gconst16*gconst17*gconst23*gconst32))+((gconst14*gconst17*gconst25*gconst33))+(((-1.0)*gconst13*gconst18*gconst27*gconst31))+(((-1.0)*gconst18*gconst20*gconst23*gconst27))+(((-1.0)*gconst12*gconst16*gconst28*gconst33))+((gconst23*gconst27*gconst32*gconst6))+(((-1.0)*gconst16*gconst21*gconst22*gconst28))+((gconst22*gconst27*gconst30*gconst9))+(((-1.0)*gconst2*gconst25*gconst30*gconst31))+((gconst13*gconst16*gconst28*gconst32))+(((-1.0)*gconst23*gconst27*gconst31*gconst7))+((gconst24*gconst29*gconst31*gconst4))+(((-1.0)*gconst16*gconst18*gconst23*gconst31))+(((-1.0)*gconst12*gconst17*gconst27*gconst33))+((gconst24*gconst25*gconst33*gconst6))+((gconst14*gconst21*gconst25*gconst28))+((gconst0*gconst27*gconst30*gconst31))+((gconst23*gconst28*gconst32*gconst5))+(((-1.0)*gconst12*gconst21*gconst27*gconst28))+((gconst12*gconst19*gconst27*gconst31))+(((-1.0)*gconst0*gconst27*gconst28*gconst33))+(((-1.0)*gconst19*gconst20*gconst24*gconst25))+((gconst1*gconst27*gconst28*gconst32))+(((-1.0)*gconst24*gconst25*gconst31*gconst8))+(((-1.0)*gconst16*gconst17*gconst22*gconst33))+((gconst14*gconst20*gconst26*gconst29))+((gconst24*gconst26*gconst29*gconst9))+((gconst14*gconst15*gconst28*gconst33))+((gconst12*gconst16*gconst30*gconst31))+((gconst12*gconst20*gconst27*gconst30))+(((-1.0)*gconst13*gconst20*gconst27*gconst29))+(((-1.0)*gconst24*gconst3*gconst30*gconst31))+(((-1.0)*gconst22*gconst28*gconst33*gconst5))+((gconst15*gconst21*gconst24*gconst28))+((gconst16*gconst20*gconst22*gconst30))+(((-1.0)*gconst24*gconst26*gconst32*gconst6))+(((-1.0)*gconst22*gconst27*gconst33*gconst6))+(((-1.0)*gconst14*gconst15*gconst30*gconst31))+(((-1.0)*gconst1*gconst27*gconst29*gconst31))+((gconst24*gconst26*gconst31*gconst7))+(((-1.0)*gconst14*gconst19*gconst25*gconst31))+(((-1.0)*gconst15*gconst20*gconst24*gconst30))+(((-1.0)*gconst23*gconst29*gconst31*gconst5))+((gconst24*gconst28*gconst3*gconst33))+((gconst18*gconst20*gconst24*gconst26))+((gconst22*gconst30*gconst31*gconst5))+((gconst2*gconst26*gconst29*gconst31))+(((-1.0)*gconst13*gconst16*gconst29*gconst31))+(((-1.0)*gconst14*gconst17*gconst26*gconst32))+(((-1.0)*gconst11*gconst22*gconst27*gconst28))+((gconst2*gconst25*gconst28*gconst33))+(((-1.0)*gconst10*gconst24*gconst26*gconst28))+(((-1.0)*gconst24*gconst25*gconst30*gconst9)));
op[3]=((((-1.0)*gconst18*gconst23*gconst31*gconst5))+(((-1.0)*gconst1*gconst16*gconst29*gconst31))+((gconst12*gconst27*gconst30*gconst9))+(((-1.0)*gconst12*gconst28*gconst33*gconst5))+((gconst16*gconst19*gconst20*gconst22))+((gconst20*gconst24*gconst29*gconst4))+((gconst0*gconst16*gconst30*gconst31))+(((-1.0)*gconst13*gconst29*gconst31*gconst5))+(((-1.0)*gconst14*gconst25*gconst31*gconst8))+((gconst11*gconst14*gconst25*gconst28))+((gconst15*gconst17*gconst21*gconst24))+(((-1.0)*gconst13*gconst27*gconst29*gconst9))+(((-1.0)*gconst2*gconst20*gconst25*gconst30))+(((-1.0)*gconst0*gconst16*gconst28*gconst33))+((gconst11*gconst15*gconst24*gconst28))+((gconst14*gconst26*gconst31*gconst7))+((gconst18*gconst2*gconst26*gconst31))+((gconst21*gconst24*gconst28*gconst3))+((gconst1*gconst16*gconst28*gconst32))+(((-1.0)*gconst21*gconst22*gconst28*gconst5))+((gconst15*gconst24*gconst33*gconst6))+(((-1.0)*gconst11*gconst16*gconst22*gconst28))+((gconst14*gconst15*gconst21*gconst28))+(((-1.0)*gconst20*gconst23*gconst29*gconst5))+((gconst10*gconst13*gconst27*gconst28))+(((-1.0)*gconst11*gconst12*gconst27*gconst28))+((gconst10*gconst16*gconst23*gconst28))+(((-1.0)*gconst16*gconst22*gconst33*gconst6))+(((-1.0)*gconst13*gconst27*gconst31*gconst7))+(((-1.0)*gconst19*gconst24*gconst25*gconst9))+(((-1.0)*gconst15*gconst24*gconst31*gconst8))+((gconst0*gconst20*gconst27*gconst30))+((gconst13*gconst16*gconst17*gconst32))+(((-1.0)*gconst1*gconst18*gconst27*gconst31))+(((-1.0)*gconst20*gconst23*gconst27*gconst7))+((gconst20*gconst24*gconst26*gconst7))+((gconst16*gconst22*gconst31*gconst8))+((gconst19*gconst22*gconst31*gconst5))+((gconst14*gconst25*gconst33*gconst6))+(((-1.0)*gconst20*gconst24*gconst25*gconst8))+((gconst17*gconst24*gconst3*gconst33))+((gconst20*gconst22*gconst30*gconst5))+(((-1.0)*gconst17*gconst24*gconst32*gconst4))+(((-1.0)*gconst21*gconst22*gconst27*gconst6))+(((-1.0)*gconst17*gconst2*gconst26*gconst32))+(((-1.0)*gconst13*gconst18*gconst20*gconst27))+((gconst2*gconst20*gconst26*gconst29))+(((-1.0)*gconst16*gconst23*gconst31*gconst7))+(((-1.0)*gconst14*gconst26*gconst32*gconst6))+(((-1.0)*gconst20*gconst24*gconst3*gconst30))+(((-1.0)*gconst12*gconst17*gconst21*gconst27))+(((-1.0)*gconst1*gconst20*gconst27*gconst29))+((gconst14*gconst29*gconst31*gconst4))+(((-1.0)*gconst13*gconst16*gconst18*gconst31))+((gconst16*gconst23*gconst32*gconst6))+((gconst19*gconst22*gconst27*gconst9))+(((-1.0)*gconst10*gconst17*gconst24*gconst26))+((gconst13*gconst27*gconst32*gconst6))+((gconst17*gconst2*gconst25*gconst33))+((gconst12*gconst19*gconst20*gconst27))+((gconst14*gconst18*gconst20*gconst26))+(((-1.0)*gconst15*gconst19*gconst20*gconst24))+(((-1.0)*gconst14*gconst15*gconst20*gconst30))+((gconst13*gconst28*gconst32*gconst5))+(((-1.0)*gconst19*gconst24*gconst3*gconst31))+(((-1.0)*gconst12*gconst16*gconst17*gconst33))+(((-1.0)*gconst16*gconst17*gconst21*gconst22))+((gconst16*gconst22*gconst30*gconst9))+((gconst10*gconst17*gconst23*gconst27))+(((-1.0)*gconst14*gconst25*gconst30*gconst9))+(((-1.0)*gconst18*gconst23*gconst27*gconst9))+((gconst14*gconst15*gconst17*gconst33))+((gconst17*gconst23*gconst32*gconst5))+((gconst2*gconst21*gconst25*gconst28))+(((-1.0)*gconst15*gconst24*gconst30*gconst9))+(((-1.0)*gconst12*gconst16*gconst21*gconst28))+(((-1.0)*gconst17*gconst22*gconst33*gconst5))+(((-1.0)*gconst14*gconst15*gconst19*gconst31))+((gconst0*gconst19*gconst27*gconst31))+((gconst1*gconst17*gconst27*gconst32))+((gconst14*gconst17*gconst21*gconst25))+((gconst20*gconst22*gconst27*gconst8))+(((-1.0)*gconst0*gconst21*gconst27*gconst28))+((gconst14*gconst28*gconst3*gconst33))+(((-1.0)*gconst12*gconst27*gconst33*gconst6))+((gconst12*gconst16*gconst20*gconst30))+(((-1.0)*gconst14*gconst28*gconst32*gconst4))+(((-1.0)*gconst14*gconst19*gconst20*gconst25))+((gconst11*gconst17*gconst24*gconst25))+((gconst18*gconst24*gconst31*gconst4))+(((-1.0)*gconst0*gconst17*gconst27*gconst33))+((gconst12*gconst30*gconst31*gconst5))+((gconst12*gconst16*gconst19*gconst31))+(((-1.0)*gconst16*gconst23*gconst29*gconst9))+((gconst15*gconst2*gconst28*gconst33))+((gconst18*gconst24*gconst26*gconst9))+((gconst21*gconst24*gconst25*gconst6))+(((-1.0)*gconst10*gconst14*gconst26*gconst28))+(((-1.0)*gconst13*gconst16*gconst20*gconst29))+(((-1.0)*gconst16*gconst18*gconst20*gconst23))+(((-1.0)*gconst11*gconst17*gconst22*gconst27))+((gconst14*gconst26*gconst29*gconst9))+(((-1.0)*gconst15*gconst2*gconst30*gconst31))+(((-1.0)*gconst14*gconst3*gconst30*gconst31))+(((-1.0)*gconst19*gconst2*gconst25*gconst31))+((gconst12*gconst27*gconst31*gconst8)));
op[4]=(((gconst10*gconst23*gconst28*gconst5))+(((-1.0)*gconst19*gconst2*gconst20*gconst25))+(((-1.0)*gconst15*gconst20*gconst24*gconst8))+(((-1.0)*gconst14*gconst19*gconst3*gconst31))+((gconst0*gconst19*gconst20*gconst27))+((gconst14*gconst18*gconst31*gconst4))+(((-1.0)*gconst0*gconst27*gconst33*gconst6))+(((-1.0)*gconst11*gconst22*gconst27*gconst6))+(((-1.0)*gconst0*gconst11*gconst27*gconst28))+((gconst0*gconst16*gconst20*gconst30))+((gconst1*gconst27*gconst32*gconst6))+((gconst14*gconst21*gconst25*gconst6))+((gconst12*gconst19*gconst27*gconst9))+(((-1.0)*gconst24*gconst25*gconst8*gconst9))+(((-1.0)*gconst1*gconst18*gconst20*gconst27))+((gconst2*gconst28*gconst3*gconst33))+(((-1.0)*gconst15*gconst19*gconst2*gconst31))+(((-1.0)*gconst13*gconst16*gconst29*gconst9))+((gconst16*gconst20*gconst22*gconst8))+(((-1.0)*gconst12*gconst21*gconst28*gconst5))+(((-1.0)*gconst23*gconst27*gconst7*gconst9))+((gconst22*gconst30*gconst5*gconst9))+((gconst22*gconst31*gconst5*gconst8))+(((-1.0)*gconst24*gconst3*gconst31*gconst8))+((gconst22*gconst27*gconst8*gconst9))+(((-1.0)*gconst13*gconst16*gconst18*gconst20))+(((-1.0)*gconst12*gconst17*gconst33*gconst5))+((gconst14*gconst20*gconst26*gconst7))+((gconst2*gconst26*gconst29*gconst9))+(((-1.0)*gconst14*gconst20*gconst25*gconst8))+((gconst0*gconst27*gconst30*gconst9))+((gconst11*gconst14*gconst15*gconst28))+((gconst14*gconst18*gconst26*gconst9))+((gconst11*gconst14*gconst17*gconst25))+(((-1.0)*gconst12*gconst16*gconst17*gconst21))+(((-1.0)*gconst1*gconst16*gconst20*gconst29))+((gconst14*gconst15*gconst33*gconst6))+((gconst24*gconst3*gconst33*gconst6))+(((-1.0)*gconst14*gconst19*gconst25*gconst9))+(((-1.0)*gconst1*gconst27*gconst29*gconst9))+(((-1.0)*gconst14*gconst17*gconst32*gconst4))+(((-1.0)*gconst18*gconst20*gconst23*gconst5))+((gconst14*gconst17*gconst3*gconst33))+((gconst11*gconst15*gconst17*gconst24))+(((-1.0)*gconst13*gconst18*gconst27*gconst9))+(((-1.0)*gconst1*gconst16*gconst18*gconst31))+((gconst0*gconst30*gconst31*gconst5))+((gconst1*gconst28*gconst32*gconst5))+(((-1.0)*gconst2*gconst25*gconst31*gconst8))+(((-1.0)*gconst2*gconst3*gconst30*gconst31))+(((-1.0)*gconst2*gconst28*gconst32*gconst4))+(((-1.0)*gconst12*gconst16*gconst33*gconst6))+((gconst10*gconst23*gconst27*gconst6))+(((-1.0)*gconst0*gconst28*gconst33*gconst5))+(((-1.0)*gconst12*gconst21*gconst27*gconst6))+((gconst18*gconst20*gconst24*gconst4))+((gconst17*gconst21*gconst24*gconst3))+(((-1.0)*gconst13*gconst20*gconst29*gconst5))+(((-1.0)*gconst24*gconst32*gconst4*gconst6))+(((-1.0)*gconst14*gconst20*gconst3*gconst30))+((gconst1*gconst10*gconst27*gconst28))+((gconst10*gconst16*gconst17*gconst23))+((gconst12*gconst16*gconst31*gconst8))+((gconst24*gconst29*gconst4*gconst9))+((gconst0*gconst27*gconst31*gconst8))+((gconst16*gconst19*gconst22*gconst9))+(((-1.0)*gconst11*gconst16*gconst17*gconst22))+((gconst11*gconst24*gconst28*gconst3))+(((-1.0)*gconst13*gconst18*gconst31*gconst5))+((gconst11*gconst24*gconst25*gconst6))+(((-1.0)*gconst14*gconst15*gconst19*gconst20))+(((-1.0)*gconst15*gconst19*gconst24*gconst9))+(((-1.0)*gconst15*gconst2*gconst20*gconst30))+(((-1.0)*gconst1*gconst27*gconst31*gconst7))+(((-1.0)*gconst10*gconst24*gconst28*gconst4))+((gconst15*gconst2*gconst21*gconst28))+(((-1.0)*gconst11*gconst22*gconst28*gconst5))+(((-1.0)*gconst2*gconst26*gconst32*gconst6))+(((-1.0)*gconst16*gconst20*gconst23*gconst7))+((gconst12*gconst19*gconst31*gconst5))+(((-1.0)*gconst16*gconst18*gconst23*gconst9))+(((-1.0)*gconst10*gconst14*gconst17*gconst26))+(((-1.0)*gconst11*gconst12*gconst16*gconst28))+((gconst2*gconst29*gconst31*gconst4))+((gconst15*gconst17*gconst2*gconst33))+((gconst24*gconst26*gconst7*gconst9))+(((-1.0)*gconst14*gconst15*gconst31*gconst8))+(((-1.0)*gconst10*gconst2*gconst26*gconst28))+((gconst18*gconst2*gconst20*gconst26))+((gconst15*gconst21*gconst24*gconst6))+((gconst12*gconst16*gconst19*gconst20))+(((-1.0)*gconst22*gconst33*gconst5*gconst6))+(((-1.0)*gconst19*gconst20*gconst24*gconst3))+((gconst14*gconst15*gconst17*gconst21))+(((-1.0)*gconst13*gconst20*gconst27*gconst7))+(((-1.0)*gconst23*gconst31*gconst5*gconst7))+(((-1.0)*gconst2*gconst25*gconst30*gconst9))+(((-1.0)*gconst1*gconst29*gconst31*gconst5))+(((-1.0)*gconst17*gconst21*gconst22*gconst5))+(((-1.0)*gconst23*gconst29*gconst5*gconst9))+((gconst12*gconst20*gconst30*gconst5))+((gconst12*gconst16*gconst30*gconst9))+(((-1.0)*gconst14*gconst15*gconst30*gconst9))+(((-1.0)*gconst0*gconst16*gconst17*gconst33))+(((-1.0)*gconst0*gconst17*gconst21*gconst27))+((gconst10*gconst13*gconst17*gconst27))+((gconst17*gconst2*gconst21*gconst25))+((gconst19*gconst20*gconst22*gconst5))+((gconst13*gconst16*gconst32*gconst6))+((gconst12*gconst20*gconst27*gconst8))+(((-1.0)*gconst13*gconst16*gconst31*gconst7))+(((-1.0)*gconst10*gconst24*gconst26*gconst6))+(((-1.0)*gconst24*gconst3*gconst30*gconst9))+((gconst0*gconst16*gconst19*gconst31))+((gconst24*gconst31*gconst4*gconst7))+((gconst2*gconst26*gconst31*gconst7))+((gconst14*gconst20*gconst29*gconst4))+(((-1.0)*gconst11*gconst12*gconst17*gconst27))+(((-1.0)*gconst16*gconst21*gconst22*gconst6))+((gconst1*gconst16*gconst17*gconst32))+((gconst2*gconst25*gconst33*gconst6))+((gconst10*gconst13*gconst16*gconst28))+((gconst11*gconst2*gconst25*gconst28))+((gconst23*gconst32*gconst5*gconst6))+((gconst14*gconst21*gconst28*gconst3))+((gconst13*gconst17*gconst32*gconst5))+(((-1.0)*gconst0*gconst16*gconst21*gconst28)));
op[5]=((((-1.0)*gconst14*gconst3*gconst30*gconst9))+((gconst14*gconst15*gconst21*gconst6))+(((-1.0)*gconst14*gconst25*gconst8*gconst9))+(((-1.0)*gconst1*gconst20*gconst29*gconst5))+((gconst14*gconst29*gconst4*gconst9))+(((-1.0)*gconst11*gconst12*gconst27*gconst6))+(((-1.0)*gconst10*gconst14*gconst28*gconst4))+(((-1.0)*gconst1*gconst16*gconst29*gconst9))+((gconst11*gconst14*gconst25*gconst6))+(((-1.0)*gconst13*gconst27*gconst7*gconst9))+((gconst2*gconst20*gconst29*gconst4))+(((-1.0)*gconst19*gconst24*gconst3*gconst9))+((gconst21*gconst24*gconst3*gconst6))+((gconst11*gconst17*gconst24*gconst3))+(((-1.0)*gconst20*gconst23*gconst5*gconst7))+(((-1.0)*gconst13*gconst31*gconst5*gconst7))+((gconst15*gconst2*gconst33*gconst6))+((gconst0*gconst20*gconst30*gconst5))+((gconst1*gconst10*gconst17*gconst27))+(((-1.0)*gconst1*gconst18*gconst31*gconst5))+((gconst2*gconst21*gconst28*gconst3))+((gconst12*gconst27*gconst8*gconst9))+(((-1.0)*gconst13*gconst16*gconst18*gconst9))+(((-1.0)*gconst19*gconst2*gconst3*gconst31))+(((-1.0)*gconst14*gconst19*gconst20*gconst3))+((gconst11*gconst17*gconst2*gconst25))+(((-1.0)*gconst2*gconst20*gconst3*gconst30))+(((-1.0)*gconst1*gconst16*gconst18*gconst20))+(((-1.0)*gconst0*gconst17*gconst33*gconst5))+((gconst13*gconst32*gconst5*gconst6))+((gconst10*gconst16*gconst23*gconst6))+(((-1.0)*gconst0*gconst21*gconst27*gconst6))+((gconst11*gconst14*gconst15*gconst17))+(((-1.0)*gconst0*gconst16*gconst33*gconst6))+((gconst12*gconst16*gconst20*gconst8))+(((-1.0)*gconst13*gconst16*gconst20*gconst7))+((gconst12*gconst30*gconst5*gconst9))+((gconst1*gconst10*gconst16*gconst28))+(((-1.0)*gconst15*gconst19*gconst2*gconst20))+(((-1.0)*gconst0*gconst21*gconst28*gconst5))+(((-1.0)*gconst12*gconst33*gconst5*gconst6))+((gconst10*gconst13*gconst28*gconst5))+((gconst1*gconst16*gconst32*gconst6))+(((-1.0)*gconst0*gconst11*gconst17*gconst27))+(((-1.0)*gconst20*gconst24*gconst3*gconst8))+(((-1.0)*gconst11*gconst17*gconst22*gconst5))+(((-1.0)*gconst13*gconst29*gconst5*gconst9))+((gconst0*gconst19*gconst31*gconst5))+((gconst12*gconst16*gconst19*gconst9))+(((-1.0)*gconst14*gconst15*gconst19*gconst9))+(((-1.0)*gconst0*gconst11*gconst16*gconst28))+(((-1.0)*gconst13*gconst18*gconst20*gconst5))+(((-1.0)*gconst21*gconst22*gconst5*gconst6))+(((-1.0)*gconst12*gconst17*gconst21*gconst5))+((gconst12*gconst31*gconst5*gconst8))+((gconst10*gconst17*gconst23*gconst5))+((gconst15*gconst17*gconst2*gconst21))+((gconst14*gconst31*gconst4*gconst7))+(((-1.0)*gconst12*gconst16*gconst21*gconst6))+(((-1.0)*gconst15*gconst24*gconst8*gconst9))+(((-1.0)*gconst16*gconst23*gconst7*gconst9))+((gconst20*gconst24*gconst4*gconst7))+(((-1.0)*gconst1*gconst18*gconst27*gconst9))+(((-1.0)*gconst14*gconst32*gconst4*gconst6))+(((-1.0)*gconst10*gconst17*gconst24*gconst4))+(((-1.0)*gconst11*gconst12*gconst28*gconst5))+(((-1.0)*gconst17*gconst2*gconst32*gconst4))+(((-1.0)*gconst15*gconst2*gconst30*gconst9))+(((-1.0)*gconst1*gconst20*gconst27*gconst7))+((gconst0*gconst20*gconst27*gconst8))+((gconst0*gconst16*gconst31*gconst8))+(((-1.0)*gconst15*gconst2*gconst31*gconst8))+((gconst17*gconst2*gconst3*gconst33))+(((-1.0)*gconst11*gconst12*gconst16*gconst17))+((gconst18*gconst2*gconst31*gconst4))+((gconst2*gconst20*gconst26*gconst7))+((gconst0*gconst19*gconst27*gconst9))+(((-1.0)*gconst11*gconst16*gconst22*gconst6))+((gconst16*gconst22*gconst8*gconst9))+((gconst11*gconst15*gconst2*gconst28))+((gconst14*gconst18*gconst20*gconst4))+((gconst18*gconst2*gconst26*gconst9))+((gconst0*gconst16*gconst30*gconst9))+((gconst11*gconst14*gconst28*gconst3))+(((-1.0)*gconst2*gconst20*gconst25*gconst8))+(((-1.0)*gconst19*gconst2*gconst25*gconst9))+((gconst14*gconst3*gconst33*gconst6))+(((-1.0)*gconst14*gconst3*gconst31*gconst8))+(((-1.0)*gconst1*gconst16*gconst31*gconst7))+(((-1.0)*gconst14*gconst15*gconst20*gconst8))+((gconst14*gconst17*gconst21*gconst3))+((gconst10*gconst13*gconst27*gconst6))+((gconst19*gconst22*gconst5*gconst9))+((gconst20*gconst22*gconst5*gconst8))+((gconst14*gconst26*gconst7*gconst9))+((gconst10*gconst13*gconst16*gconst17))+(((-1.0)*gconst10*gconst14*gconst26*gconst6))+(((-1.0)*gconst10*gconst17*gconst2*gconst26))+((gconst11*gconst15*gconst24*gconst6))+((gconst18*gconst24*gconst4*gconst9))+((gconst12*gconst19*gconst20*gconst5))+((gconst2*gconst21*gconst25*gconst6))+(((-1.0)*gconst18*gconst23*gconst5*gconst9))+((gconst1*gconst17*gconst32*gconst5))+(((-1.0)*gconst0*gconst16*gconst17*gconst21))+((gconst0*gconst16*gconst19*gconst20)));
op[6]=((((-1.0)*gconst13*gconst18*gconst5*gconst9))+((gconst0*gconst16*gconst19*gconst9))+(((-1.0)*gconst0*gconst17*gconst21*gconst5))+(((-1.0)*gconst23*gconst5*gconst7*gconst9))+((gconst15*gconst2*gconst21*gconst6))+(((-1.0)*gconst11*gconst12*gconst17*gconst5))+(((-1.0)*gconst13*gconst20*gconst5*gconst7))+(((-1.0)*gconst24*gconst3*gconst8*gconst9))+(((-1.0)*gconst1*gconst16*gconst18*gconst9))+((gconst12*gconst20*gconst5*gconst8))+((gconst11*gconst14*gconst17*gconst3))+(((-1.0)*gconst15*gconst19*gconst2*gconst9))+(((-1.0)*gconst13*gconst16*gconst7*gconst9))+((gconst11*gconst24*gconst3*gconst6))+((gconst1*gconst32*gconst5*gconst6))+(((-1.0)*gconst14*gconst19*gconst3*gconst9))+(((-1.0)*gconst10*gconst24*gconst4*gconst6))+(((-1.0)*gconst1*gconst31*gconst5*gconst7))+(((-1.0)*gconst10*gconst2*gconst26*gconst6))+(((-1.0)*gconst0*gconst11*gconst27*gconst6))+((gconst12*gconst19*gconst5*gconst9))+((gconst14*gconst20*gconst4*gconst7))+(((-1.0)*gconst2*gconst32*gconst4*gconst6))+((gconst1*gconst10*gconst16*gconst17))+((gconst18*gconst2*gconst20*gconst4))+((gconst11*gconst2*gconst25*gconst6))+((gconst17*gconst2*gconst21*gconst3))+((gconst2*gconst3*gconst33*gconst6))+((gconst10*gconst13*gconst17*gconst5))+(((-1.0)*gconst0*gconst11*gconst16*gconst17))+(((-1.0)*gconst0*gconst33*gconst5*gconst6))+((gconst1*gconst10*gconst28*gconst5))+((gconst24*gconst4*gconst7*gconst9))+((gconst10*gconst13*gconst16*gconst6))+((gconst11*gconst15*gconst17*gconst2))+((gconst11*gconst2*gconst28*gconst3))+(((-1.0)*gconst15*gconst2*gconst20*gconst8))+(((-1.0)*gconst1*gconst18*gconst20*gconst5))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+((gconst0*gconst31*gconst5*gconst8))+(((-1.0)*gconst2*gconst3*gconst31*gconst8))+(((-1.0)*gconst0*gconst11*gconst28*gconst5))+(((-1.0)*gconst1*gconst29*gconst5*gconst9))+(((-1.0)*gconst1*gconst27*gconst7*gconst9))+(((-1.0)*gconst11*gconst22*gconst5*gconst6))+((gconst0*gconst27*gconst8*gconst9))+((gconst12*gconst16*gconst8*gconst9))+((gconst14*gconst21*gconst3*gconst6))+((gconst1*gconst10*gconst27*gconst6))+(((-1.0)*gconst2*gconst3*gconst30*gconst9))+(((-1.0)*gconst10*gconst14*gconst17*gconst4))+(((-1.0)*gconst0*gconst16*gconst21*gconst6))+((gconst0*gconst30*gconst5*gconst9))+((gconst0*gconst19*gconst20*gconst5))+((gconst0*gconst16*gconst20*gconst8))+((gconst10*gconst23*gconst5*gconst6))+((gconst11*gconst14*gconst15*gconst6))+(((-1.0)*gconst2*gconst25*gconst8*gconst9))+((gconst22*gconst5*gconst8*gconst9))+(((-1.0)*gconst10*gconst2*gconst28*gconst4))+(((-1.0)*gconst1*gconst16*gconst20*gconst7))+(((-1.0)*gconst11*gconst12*gconst16*gconst6))+((gconst14*gconst18*gconst4*gconst9))+((gconst2*gconst26*gconst7*gconst9))+((gconst2*gconst29*gconst4*gconst9))+((gconst2*gconst31*gconst4*gconst7))+(((-1.0)*gconst19*gconst2*gconst20*gconst3))+(((-1.0)*gconst14*gconst20*gconst3*gconst8))+(((-1.0)*gconst12*gconst21*gconst5*gconst6)));
op[7]=((((-1.0)*gconst0*x116*x132))+((gconst18*gconst9*x117))+((x121*x134))+(((-1.0)*gconst12*x106*x116))+(((-1.0)*gconst20*gconst8*x112))+((x112*x113))+(((-1.0)*gconst7*x108*x130))+((gconst10*gconst13*x106))+((gconst21*x135))+(((-1.0)*gconst8*x115*x133))+((gconst17*gconst5*x122))+((gconst16*gconst9*x125))+(((-1.0)*gconst8*x115*x121))+((x122*x132))+((gconst12*gconst8*x103))+((gconst20*gconst7*x117))+(((-1.0)*gconst6*x118*x124))+(((-1.0)*gconst21*x106*x129))+(((-1.0)*gconst17*x117*x118))+((x125*x130))+(((-1.0)*gconst18*x103*x108))+((x123*x124))+(((-1.0)*gconst19*x112*x115))+((x133*x134))+((gconst0*gconst19*x103))+(((-1.0)*gconst16*x108*x123))+(((-1.0)*gconst13*gconst7*x103))+(((-1.0)*gconst5*x113*x129)));
op[8]=(((x112*x134))+((x117*x123))+(((-1.0)*gconst6*x117*x118))+((x106*x122))+((x103*x125))+(((-1.0)*gconst8*x112*x115))+(((-1.0)*gconst7*x103*x108))+(((-1.0)*gconst0*x106*x116)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
IkReal op[2+1], zeror[2];
int numroots;
IkReal x137=htj3*htj3;
IkReal x138=htj1*htj1;
IkReal x139=((0.5)*r10);
IkReal x140=(htj3*r00);
IkReal x141=(htj1*r00);
IkReal x142=((1.0)*x138);
IkReal x143=(r20*x137);
IkReal x144=((2.0)*htj1*htj3*r10);
IkReal x145=(x137*x139);
IkReal x146=(x138*x139);
IkReal x147=(x140*x142);
IkReal x148=(x138*x145);
IkReal x149=(x140+x144);
IkReal x150=(x145+x146);
IkReal x151=(x148+x139);
op[0]=((((-1.0)*x147))+(((-1.0)*x151))+(((-1.0)*x137*x141))+x150+x141+x149);
op[1]=((((-1.0)*x142*x143))+(((-1.0)*x143))+((r20*x138))+r20);
op[2]=((((-1.0)*x147))+(((-1.0)*x150))+((x137*x141))+x151+x149+(((-1.0)*x141)));
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x152=htj1*htj1;
IkReal x153=htj2*htj2;
IkReal x154=((918.0)*r00);
IkReal x155=(htj1*r00);
IkReal x156=(htj2*r10);
IkReal x157=((1.0)*r20);
IkReal x158=((312.0)*r10);
IkReal x159=((-1.0)*r20);
IkReal x160=((124.0)*x152);
IkReal x161=((-918.0)*r00);
IkReal x162=((-4000.0)*npx);
IkReal x163=((624.0)*htj2*r20);
IkReal x164=((1836.0)*htj1*r10);
IkReal x165=(x153*x158);
IkReal x166=(x152*x153);
CheckValue<IkReal> x167=IKPowWithIntegerCheck(((((-1.0)*x165))+((x152*x163))+((x152*x165))+x163+x158+(((-1.0)*x152*x158))+(((624.0)*x153*x155))+(((-624.0)*x155))),-1);
if(!x167.valid){
continue;
}
j7array[0]=((x167.value)*(((124.0)+((x153*x157))+((x153*x154))+((x161*x166))+((x157*x166))+(((-2.0)*x152*x156))+((x152*x161))+((x152*x162))+((x162*x166))+(((-4.0)*htj2*x155))+((x152*x159))+(((124.0)*x153))+x162+x160+x164+x154+x159+(((2.0)*x156))+((x153*x162))+((x153*x160))+((x153*x164)))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

innerfn(solutions);
}
}
    }
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j4eval[1];
j4eval[0]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
j4eval[0]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((-1.0)*cj1*r10*sj2))+((cj2*r20))+((r00*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*sj1))+((cj1*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r10*sj2))+((cj2*r20))+((r00*sj1*sj2))))+IKsqr((((r10*sj1))+((cj1*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*r10*sj2))+((cj2*r20))+((r00*sj1*sj2))), (((r10*sj1))+((cj1*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(((r10*sj1))+((cj1*r00))+(((-1.0)*(IKcos(j4)))));
evalcond[1]=((((-1.0)*cj1*r10*sj2))+(((-1.0)*(IKsin(j4))))+((cj2*r20))+((r00*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))))+(IKabs((((cj1*r02))+((r12*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
j5eval[1]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x168=((1.0)*sj2);
if( IKabs((((cj1*r12*sj2))+(((-1.0)*cj2*r22))+(((-1.0)*r02*sj1*x168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r11*x168))+((cj2*r21))+((r01*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r12*sj2))+(((-1.0)*cj2*r22))+(((-1.0)*r02*sj1*x168))))+IKsqr(((((-1.0)*cj1*r11*x168))+((cj2*r21))+((r01*sj1*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r12*sj2))+(((-1.0)*cj2*r22))+(((-1.0)*r02*sj1*x168))), ((((-1.0)*cj1*r11*x168))+((cj2*r21))+((r01*sj1*sj2))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x169=IKsin(j5);
IkReal x170=IKcos(j5);
IkReal x171=((1.0)*cj2);
IkReal x172=(cj1*r11);
IkReal x173=((1.0)*sj2);
IkReal x174=(r02*sj1);
IkReal x175=(cj2*sj1);
IkReal x176=(j7*r22);
IkReal x177=(cj1*r12);
IkReal x178=(sj1*sj2);
IkReal x179=(cj1*py);
IkReal x180=((1.0)*x170);
evalcond[0]=(((sj2*x174))+x169+((cj2*r22))+(((-1.0)*x173*x177)));
evalcond[1]=(((r01*x178))+(((-1.0)*x180))+((cj2*r21))+(((-1.0)*x172*x173)));
evalcond[2]=(((r01*x175))+(((-1.0)*x169))+(((-1.0)*x171*x172))+(((-1.0)*r21*x173)));
evalcond[3]=((((-1.0)*r22*x173))+(((-1.0)*x180))+((cj2*x174))+(((-1.0)*x171*x177)));
evalcond[4]=((0.00025011)+(((-1.0)*j7*x173*x174))+(((0.07042834)*x169))+((px*x178))+((j7*sj2*x177))+(((-1.0)*x171*x176))+((cj2*pz))+(((-1.0)*x173*x179)));
evalcond[5]=((-0.00025)+((sj2*x176))+(((-1.0)*pz*x173))+((px*x175))+(((-1.0)*j7*x171*x174))+(((-1.0)*x171*x179))+((cj2*j7*x177))+(((-0.07042834)*x170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x181=(cj1*sj2);
IkReal x182=(sj1*sj2);
if( IKabs((((cj2*r22))+((r02*x182))+(((-1.0)*r12*x181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*r21))+(((-1.0)*r01*x182))+((r11*x181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*r22))+((r02*x182))+(((-1.0)*r12*x181))))+IKsqr(((((-1.0)*cj2*r21))+(((-1.0)*r01*x182))+((r11*x181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj2*r22))+((r02*x182))+(((-1.0)*r12*x181))), ((((-1.0)*cj2*r21))+(((-1.0)*r01*x182))+((r11*x181))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x183=IKcos(j5);
IkReal x184=IKsin(j5);
IkReal x185=((1.0)*cj2);
IkReal x186=(cj1*r11);
IkReal x187=((1.0)*sj2);
IkReal x188=(r02*sj1);
IkReal x189=(cj2*sj1);
IkReal x190=(j7*r22);
IkReal x191=(cj1*r12);
IkReal x192=(sj1*sj2);
IkReal x193=(cj1*py);
IkReal x194=((1.0)*x184);
evalcond[0]=((((-1.0)*x186*x187))+((r01*x192))+x183+((cj2*r21)));
evalcond[1]=(((sj2*x188))+(((-1.0)*x194))+(((-1.0)*x187*x191))+((cj2*r22)));
evalcond[2]=(((r01*x189))+(((-1.0)*x194))+(((-1.0)*x185*x186))+(((-1.0)*r21*x187)));
evalcond[3]=((((-1.0)*r22*x187))+(((-1.0)*x183))+((cj2*x188))+(((-1.0)*x185*x191)));
evalcond[4]=((0.00024989)+(((-1.0)*x187*x193))+(((-1.0)*x185*x190))+((px*x192))+((cj2*pz))+((j7*sj2*x191))+(((-0.07042834)*x184))+(((-1.0)*j7*x187*x188)));
evalcond[5]=((-0.00025)+((sj2*x190))+(((-1.0)*pz*x187))+(((-1.0)*j7*x185*x188))+((cj2*j7*x191))+(((-1.0)*x185*x193))+((px*x189))+(((-0.07042834)*x183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((r12*sj1))))+IKsqr(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r02))+((r12*sj1))), ((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x195=IKcos(j5);
IkReal x196=IKsin(j5);
IkReal x197=(cj1*cj2);
IkReal x198=(r12*sj1);
IkReal x199=((1.0)*sj2);
IkReal x200=((1.0)*j7);
IkReal x201=(cj1*r02);
IkReal x202=(cj2*sj1);
IkReal x203=((1.0)*x196);
IkReal x204=(r02*x202);
evalcond[0]=(((cj1*r01))+x195+((r11*sj1)));
evalcond[1]=(x198+(((-1.0)*x203))+x201);
evalcond[2]=((((-1.0)*r11*x197))+(((-1.0)*x203))+((r01*x202))+(((-1.0)*r21*x199)));
evalcond[3]=((((-1.0)*r12*x197))+(((-1.0)*x195))+(((-1.0)*r22*x199))+x204);
evalcond[4]=((-0.22950011)+(((-1.0)*x200*x201))+((cj1*px))+(((-1.0)*x198*x200))+((py*sj1))+(((-0.07042834)*x196)));
evalcond[5]=((-0.00025)+(((-1.0)*x200*x204))+(((-1.0)*pz*x199))+((px*x202))+((j7*r22*sj2))+((j7*r12*x197))+(((-1.0)*py*x197))+(((-0.07042834)*x195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))))+IKsqr((((cj1*r01))+((r11*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))), (((cj1*r01))+((r11*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x205=IKsin(j5);
IkReal x206=IKcos(j5);
IkReal x207=(cj1*cj2);
IkReal x208=(r12*sj1);
IkReal x209=((1.0)*sj2);
IkReal x210=((1.0)*j7);
IkReal x211=(cj1*r02);
IkReal x212=(cj2*sj1);
IkReal x213=((1.0)*x206);
IkReal x214=(r02*x212);
evalcond[0]=(x211+x205+x208);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x213)));
evalcond[2]=((((-1.0)*r21*x209))+((r01*x212))+(((-1.0)*x205))+(((-1.0)*r11*x207)));
evalcond[3]=((((-1.0)*r22*x209))+x214+(((-1.0)*r12*x207))+(((-1.0)*x213)));
evalcond[4]=((-0.22949989)+((cj1*px))+(((-1.0)*x210*x211))+(((0.07042834)*x205))+(((-1.0)*x208*x210))+((py*sj1)));
evalcond[5]=((-0.00025)+((j7*r12*x207))+(((-0.07042834)*x206))+(((-1.0)*pz*x209))+((j7*r22*sj2))+(((-1.0)*x210*x214))+((px*x212))+(((-1.0)*py*x207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x215=IKPowWithIntegerCheck(sj4,-1);
if(!x215.valid){
continue;
}
CheckValue<IkReal> x216=IKPowWithIntegerCheck(cj4,-1);
if(!x216.valid){
continue;
}
if( IKabs(((x215.value)*((((cj1*r02))+((r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x216.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x215.value)*((((cj1*r02))+((r12*sj1))))))+IKsqr(((x216.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x215.value)*((((cj1*r02))+((r12*sj1))))), ((x216.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x217=IKsin(j5);
IkReal x218=IKcos(j5);
IkReal x219=(cj1*cj2);
IkReal x220=((1.0)*r11);
IkReal x221=(cj2*r22);
IkReal x222=((1.0)*sj2);
IkReal x223=(j7*r02);
IkReal x224=(r12*sj1);
IkReal x225=(j7*r12);
IkReal x226=(sj1*sj2);
IkReal x227=(cj2*sj1);
IkReal x228=(cj1*sj2);
IkReal x229=((1.0)*j7);
IkReal x230=((1.0)*x217);
IkReal x231=(cj4*x217);
IkReal x232=((1.0)*x218);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj4*x218)));
evalcond[1]=((((-1.0)*sj4*x230))+((cj1*r02))+x224);
evalcond[2]=((((-1.0)*cj1*r12*x222))+x221+x231+((r02*x226)));
evalcond[3]=(((r01*x226))+(((-1.0)*cj4*x232))+((cj2*r21))+(((-1.0)*x220*x228)));
evalcond[4]=(((r01*x227))+(((-1.0)*r21*x222))+(((-1.0)*x219*x220))+(((-1.0)*x230)));
evalcond[5]=((((-1.0)*x232))+((r02*x227))+(((-1.0)*r12*x219))+(((-1.0)*r22*x222)));
evalcond[6]=((-0.2295)+(((-1.0)*cj1*x223))+(((-0.031)*cj4))+(((-1.0)*x224*x229))+((cj1*px))+(((-0.07042834)*sj4*x217))+(((-1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((-0.00025)+(((-1.0)*py*x219))+((j7*r22*sj2))+(((-0.07042834)*x218))+((x219*x225))+((px*x227))+(((-1.0)*pz*x222))+(((-1.0)*x223*x227)));
evalcond[8]=((0.00025)+((x225*x228))+(((-0.031)*sj4))+((px*x226))+((cj2*pz))+(((0.07042834)*x231))+(((-1.0)*x221*x229))+(((-1.0)*cj1*py*x222))+(((1.1e-7)*cj4))+(((-1.0)*sj1*x222*x223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x233=((1.0)*cj1);
CheckValue<IkReal> x234=IKPowWithIntegerCheck(sj4,-1);
if(!x234.valid){
continue;
}
if( IKabs((((cj2*r01*sj1))+(((-1.0)*r21*sj2))+(((-1.0)*cj2*r11*x233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x234.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x233)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*r01*sj1))+(((-1.0)*r21*sj2))+(((-1.0)*cj2*r11*x233))))+IKsqr(((x234.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x233))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj2*r01*sj1))+(((-1.0)*r21*sj2))+(((-1.0)*cj2*r11*x233))), ((x234.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x233))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x235=IKsin(j5);
IkReal x236=IKcos(j5);
IkReal x237=(cj1*cj2);
IkReal x238=((1.0)*r11);
IkReal x239=(cj2*r22);
IkReal x240=((1.0)*sj2);
IkReal x241=(j7*r02);
IkReal x242=(r12*sj1);
IkReal x243=(j7*r12);
IkReal x244=(sj1*sj2);
IkReal x245=(cj2*sj1);
IkReal x246=(cj1*sj2);
IkReal x247=((1.0)*j7);
IkReal x248=((1.0)*x235);
IkReal x249=(cj4*x235);
IkReal x250=((1.0)*x236);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj4*x236)));
evalcond[1]=((((-1.0)*sj4*x248))+((cj1*r02))+x242);
evalcond[2]=(((r02*x244))+(((-1.0)*cj1*r12*x240))+x239+x249);
evalcond[3]=((((-1.0)*cj4*x250))+((cj2*r21))+(((-1.0)*x238*x246))+((r01*x244)));
evalcond[4]=(((r01*x245))+(((-1.0)*x248))+(((-1.0)*x237*x238))+(((-1.0)*r21*x240)));
evalcond[5]=(((r02*x245))+(((-1.0)*r22*x240))+(((-1.0)*r12*x237))+(((-1.0)*x250)));
evalcond[6]=((-0.2295)+(((-1.0)*x242*x247))+(((-0.031)*cj4))+(((-0.07042834)*sj4*x235))+((cj1*px))+(((-1.0)*cj1*x241))+(((-1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((-0.00025)+(((-1.0)*py*x237))+(((-1.0)*pz*x240))+((px*x245))+(((-0.07042834)*x236))+((x237*x243))+((j7*r22*sj2))+(((-1.0)*x241*x245)));
evalcond[8]=((0.00025)+(((0.07042834)*x249))+((px*x244))+(((-1.0)*cj1*py*x240))+(((-0.031)*sj4))+((cj2*pz))+(((-1.0)*sj1*x240*x241))+(((-1.0)*x239*x247))+((x243*x246))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x251 = IKatan2WithCheck(IkReal((((cj1*r02))+((r12*sj1)))),IkReal(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x251.valid){
continue;
}
CheckValue<IkReal> x252=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x252.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x251.value)+(((1.5707963267949)*(x252.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x253=IKsin(j5);
IkReal x254=IKcos(j5);
IkReal x255=(cj1*cj2);
IkReal x256=((1.0)*r11);
IkReal x257=(cj2*r22);
IkReal x258=((1.0)*sj2);
IkReal x259=(j7*r02);
IkReal x260=(r12*sj1);
IkReal x261=(j7*r12);
IkReal x262=(sj1*sj2);
IkReal x263=(cj2*sj1);
IkReal x264=(cj1*sj2);
IkReal x265=((1.0)*j7);
IkReal x266=((1.0)*x253);
IkReal x267=(cj4*x253);
IkReal x268=((1.0)*x254);
evalcond[0]=(((sj4*x254))+((cj1*r01))+((r11*sj1)));
evalcond[1]=((((-1.0)*sj4*x266))+((cj1*r02))+x260);
evalcond[2]=((((-1.0)*cj1*r12*x258))+((r02*x262))+x257+x267);
evalcond[3]=((((-1.0)*cj4*x268))+((cj2*r21))+(((-1.0)*x256*x264))+((r01*x262)));
evalcond[4]=((((-1.0)*x255*x256))+(((-1.0)*r21*x258))+(((-1.0)*x266))+((r01*x263)));
evalcond[5]=((((-1.0)*r22*x258))+((r02*x263))+(((-1.0)*r12*x255))+(((-1.0)*x268)));
evalcond[6]=((-0.2295)+(((-1.0)*cj1*x259))+(((-0.031)*cj4))+((cj1*px))+(((-0.07042834)*sj4*x253))+(((-1.1e-7)*sj4))+((py*sj1))+(((-1.0)*x260*x265)));
evalcond[7]=((-0.00025)+((j7*r22*sj2))+(((-1.0)*x259*x263))+((x255*x261))+(((-1.0)*pz*x258))+(((-0.07042834)*x254))+(((-1.0)*py*x255))+((px*x263)));
evalcond[8]=((0.00025)+(((-0.031)*sj4))+(((-1.0)*sj1*x258*x259))+((cj2*pz))+(((-1.0)*cj1*py*x258))+((x261*x264))+(((-1.0)*x257*x265))+(((1.1e-7)*cj4))+((px*x262))+(((0.07042834)*x267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x269=((1.0)*r10);
if( IKabs(((((-1.0)*cj1*sj2*x269))+((cj2*r20))+((r00*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x269))+(((-1.0)*cj1*r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*sj2*x269))+((cj2*r20))+((r00*sj1*sj2))))+IKsqr(((((-1.0)*sj1*x269))+(((-1.0)*cj1*r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*sj2*x269))+((cj2*r20))+((r00*sj1*sj2))), ((((-1.0)*sj1*x269))+(((-1.0)*cj1*r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=(((r10*sj1))+((cj1*r00))+(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*r10*sj2))+(((-1.0)*(IKsin(j4))))+((cj2*r20))+((r00*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))))+(IKabs((((cj1*r01))+((r11*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
j5eval[1]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x270=(cj1*r12);
IkReal x271=((1.0)*r02*sj1);
if( IKabs(((((-1.0)*sj2*x271))+((sj2*x270))+(((-1.0)*cj2*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*sj2))+(((-1.0)*cj2*x271))+((cj2*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x271))+((sj2*x270))+(((-1.0)*cj2*r22))))+IKsqr((((r22*sj2))+(((-1.0)*cj2*x271))+((cj2*x270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj2*x271))+((sj2*x270))+(((-1.0)*cj2*r22))), (((r22*sj2))+(((-1.0)*cj2*x271))+((cj2*x270))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x272=IKsin(j5);
IkReal x273=IKcos(j5);
IkReal x274=((1.0)*cj2);
IkReal x275=(cj1*r11);
IkReal x276=((1.0)*sj2);
IkReal x277=(r02*sj1);
IkReal x278=(cj2*sj1);
IkReal x279=(j7*r22);
IkReal x280=(cj1*r12);
IkReal x281=(sj1*sj2);
IkReal x282=(cj1*py);
evalcond[0]=((((-1.0)*x276*x280))+((sj2*x277))+x272+((cj2*r22)));
evalcond[1]=((((-1.0)*x274*x275))+x272+((r01*x278))+(((-1.0)*r21*x276)));
evalcond[2]=(x273+(((-1.0)*r22*x276))+((cj2*x277))+(((-1.0)*x274*x280)));
evalcond[3]=(((r01*x281))+(((-1.0)*x273))+((cj2*r21))+(((-1.0)*x275*x276)));
evalcond[4]=((0.00025011)+(((0.07042834)*x272))+(((-1.0)*x274*x279))+(((-1.0)*x276*x282))+((j7*sj2*x280))+(((-1.0)*j7*x276*x277))+((cj2*pz))+((px*x281)));
evalcond[5]=((0.00025)+(((0.07042834)*x273))+(((-1.0)*pz*x276))+((px*x278))+((sj2*x279))+((cj2*j7*x280))+(((-1.0)*j7*x274*x277))+(((-1.0)*x274*x282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x283=((1.0)*cj2);
IkReal x284=(cj1*r11);
IkReal x285=(r01*sj1);
if( IKabs((((r21*sj2))+((cj2*x284))+(((-1.0)*x283*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x285))+(((-1.0)*r21*x283))+((sj2*x284)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj2))+((cj2*x284))+(((-1.0)*x283*x285))))+IKsqr(((((-1.0)*sj2*x285))+(((-1.0)*r21*x283))+((sj2*x284))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*sj2))+((cj2*x284))+(((-1.0)*x283*x285))), ((((-1.0)*sj2*x285))+(((-1.0)*r21*x283))+((sj2*x284))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x286=IKcos(j5);
IkReal x287=IKsin(j5);
IkReal x288=((1.0)*cj2);
IkReal x289=(cj1*r11);
IkReal x290=((1.0)*sj2);
IkReal x291=(r02*sj1);
IkReal x292=(cj2*sj1);
IkReal x293=(j7*r22);
IkReal x294=(cj1*r12);
IkReal x295=(sj1*sj2);
IkReal x296=(cj1*py);
evalcond[0]=((((-1.0)*x289*x290))+x286+((cj2*r21))+((r01*x295)));
evalcond[1]=((((-1.0)*x288*x289))+x287+((r01*x292))+(((-1.0)*r21*x290)));
evalcond[2]=(((cj2*x291))+x286+(((-1.0)*x288*x294))+(((-1.0)*r22*x290)));
evalcond[3]=((((-1.0)*x290*x294))+(((-1.0)*x287))+((cj2*r22))+((sj2*x291)));
evalcond[4]=((0.00024989)+(((-1.0)*x290*x296))+(((-0.07042834)*x287))+((px*x295))+(((-1.0)*j7*x290*x291))+((cj2*pz))+(((-1.0)*x288*x293))+((j7*sj2*x294)));
evalcond[5]=((0.00025)+(((-1.0)*pz*x290))+((cj2*j7*x294))+(((0.07042834)*x286))+((px*x292))+(((-1.0)*x288*x296))+((sj2*x293))+(((-1.0)*j7*x288*x291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))))+IKsqr((((cj1*r01))+((r11*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))), (((cj1*r01))+((r11*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x297=IKsin(j5);
IkReal x298=IKcos(j5);
IkReal x299=(cj1*cj2);
IkReal x300=(cj2*sj1);
IkReal x301=((1.0)*sj2);
IkReal x302=(j7*r12);
IkReal x303=((1.0)*j7*r02);
evalcond[0]=(((cj1*r02))+x297+((r12*sj1)));
evalcond[1]=((((-1.0)*x298))+((cj1*r01))+((r11*sj1)));
evalcond[2]=((((-1.0)*r21*x301))+x297+(((-1.0)*r11*x299))+((r01*x300)));
evalcond[3]=((((-1.0)*r22*x301))+((r02*x300))+x298+(((-1.0)*r12*x299)));
evalcond[4]=((-0.07349989)+(((-1.0)*sj1*x302))+((cj1*px))+(((-1.0)*cj1*x303))+((py*sj1))+(((0.07042834)*x297)));
evalcond[5]=((0.00025)+(((-1.0)*py*x299))+((px*x300))+((j7*r22*sj2))+((x299*x302))+(((-1.0)*pz*x301))+(((-1.0)*x300*x303))+(((0.07042834)*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((r12*sj1))))+IKsqr(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r02))+((r12*sj1))), ((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x304=IKsin(j5);
IkReal x305=IKcos(j5);
IkReal x306=(cj1*cj2);
IkReal x307=(r12*sj1);
IkReal x308=((1.0)*sj2);
IkReal x309=((1.0)*j7);
IkReal x310=(cj1*r02);
IkReal x311=(cj2*sj1);
IkReal x312=(r02*x311);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x305);
evalcond[1]=((((-1.0)*x304))+x307+x310);
evalcond[2]=((((-1.0)*r21*x308))+(((-1.0)*r11*x306))+x304+((r01*x311)));
evalcond[3]=((((-1.0)*r22*x308))+(((-1.0)*r12*x306))+x305+x312);
evalcond[4]=((-0.07350011)+(((-0.07042834)*x304))+((cj1*px))+(((-1.0)*x307*x309))+(((-1.0)*x309*x310))+((py*sj1)));
evalcond[5]=((0.00025)+((j7*r22*sj2))+(((-1.0)*py*x306))+(((0.07042834)*x305))+(((-1.0)*pz*x308))+((px*x311))+((j7*r12*x306))+(((-1.0)*x309*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x313=((1.0)*cj1);
CheckValue<IkReal> x314=IKPowWithIntegerCheck(sj4,-1);
if(!x314.valid){
continue;
}
CheckValue<IkReal> x315=IKPowWithIntegerCheck(cj4,-1);
if(!x315.valid){
continue;
}
if( IKabs(((x314.value)*(((((-1.0)*r02*x313))+(((-1.0)*r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x315.value)*(((((-1.0)*r11*sj2*x313))+((cj2*r21))+((r01*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x314.value)*(((((-1.0)*r02*x313))+(((-1.0)*r12*sj1))))))+IKsqr(((x315.value)*(((((-1.0)*r11*sj2*x313))+((cj2*r21))+((r01*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x314.value)*(((((-1.0)*r02*x313))+(((-1.0)*r12*sj1))))), ((x315.value)*(((((-1.0)*r11*sj2*x313))+((cj2*r21))+((r01*sj1*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x316=IKsin(j5);
IkReal x317=IKcos(j5);
IkReal x318=((1.0)*cj2);
IkReal x319=(cj1*r11);
IkReal x320=((1.0)*sj2);
IkReal x321=(j7*r02);
IkReal x322=(r12*sj1);
IkReal x323=(j7*r22);
IkReal x324=(cj1*r12);
IkReal x325=(sj1*sj2);
IkReal x326=(cj2*sj1);
IkReal x327=(cj1*py);
IkReal x328=(sj4*x316);
IkReal x329=(cj4*x316);
IkReal x330=((1.0)*x317);
evalcond[0]=(((cj1*r02))+x322+x328);
evalcond[1]=((((-1.0)*sj4*x330))+((cj1*r01))+((r11*sj1)));
evalcond[2]=((((-1.0)*x318*x319))+((r01*x326))+x316+(((-1.0)*r21*x320)));
evalcond[3]=(((r02*x326))+(((-1.0)*r22*x320))+x317+(((-1.0)*x318*x324)));
evalcond[4]=(((r02*x325))+(((-1.0)*x320*x324))+x329+((cj2*r22)));
evalcond[5]=((((-1.0)*cj4*x330))+((r01*x325))+((cj2*r21))+(((-1.0)*x319*x320)));
evalcond[6]=((-0.0735)+(((-1.0)*cj1*x321))+(((0.031)*cj4))+((cj1*px))+(((1.1e-7)*sj4))+(((-1.0)*j7*x322))+(((0.07042834)*x328))+((py*sj1)));
evalcond[7]=((0.00025)+(((0.07042834)*x317))+(((-1.0)*sj1*x318*x321))+((sj2*x323))+(((-1.0)*x318*x327))+(((-1.0)*pz*x320))+((px*x326))+((cj2*j7*x324)));
evalcond[8]=((0.00025)+((j7*sj2*x324))+(((-0.031)*sj4))+(((-1.0)*x320*x327))+((cj2*pz))+(((-1.0)*x318*x323))+(((0.07042834)*x329))+((px*x325))+(((1.1e-7)*cj4))+(((-1.0)*sj1*x320*x321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x331=IKPowWithIntegerCheck(sj4,-1);
if(!x331.valid){
continue;
}
if( IKabs((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x331.value)*((((cj1*r01))+((r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11))))+IKsqr(((x331.value)*((((cj1*r01))+((r11*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11))), ((x331.value)*((((cj1*r01))+((r11*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x332=IKsin(j5);
IkReal x333=IKcos(j5);
IkReal x334=((1.0)*cj2);
IkReal x335=(cj1*r11);
IkReal x336=((1.0)*sj2);
IkReal x337=(j7*r02);
IkReal x338=(r12*sj1);
IkReal x339=(j7*r22);
IkReal x340=(cj1*r12);
IkReal x341=(sj1*sj2);
IkReal x342=(cj2*sj1);
IkReal x343=(cj1*py);
IkReal x344=(sj4*x332);
IkReal x345=(cj4*x332);
IkReal x346=((1.0)*x333);
evalcond[0]=(((cj1*r02))+x338+x344);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*sj4*x346)));
evalcond[2]=(((r01*x342))+(((-1.0)*r21*x336))+x332+(((-1.0)*x334*x335)));
evalcond[3]=((((-1.0)*x334*x340))+x333+((r02*x342))+(((-1.0)*r22*x336)));
evalcond[4]=((((-1.0)*x336*x340))+x345+((r02*x341))+((cj2*r22)));
evalcond[5]=(((r01*x341))+(((-1.0)*cj4*x346))+((cj2*r21))+(((-1.0)*x335*x336)));
evalcond[6]=((-0.0735)+(((0.07042834)*x344))+(((0.031)*cj4))+((cj1*px))+(((1.1e-7)*sj4))+(((-1.0)*cj1*x337))+((py*sj1))+(((-1.0)*j7*x338)));
evalcond[7]=((0.00025)+((sj2*x339))+(((-1.0)*x334*x343))+((cj2*j7*x340))+(((-1.0)*pz*x336))+(((-1.0)*sj1*x334*x337))+(((0.07042834)*x333))+((px*x342)));
evalcond[8]=((0.00025)+(((0.07042834)*x345))+(((-1.0)*x336*x343))+((j7*sj2*x340))+(((-0.031)*sj4))+((cj2*pz))+(((-1.0)*sj1*x336*x337))+(((-1.0)*x334*x339))+(((1.1e-7)*cj4))+((px*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x347=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x347.valid){
continue;
}
CheckValue<IkReal> x348 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))),IkReal((((cj1*r01))+((r11*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x348.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x347.value)))+(x348.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x349=IKsin(j5);
IkReal x350=IKcos(j5);
IkReal x351=((1.0)*cj2);
IkReal x352=(cj1*r11);
IkReal x353=((1.0)*sj2);
IkReal x354=(j7*r02);
IkReal x355=(r12*sj1);
IkReal x356=(j7*r22);
IkReal x357=(cj1*r12);
IkReal x358=(sj1*sj2);
IkReal x359=(cj2*sj1);
IkReal x360=(cj1*py);
IkReal x361=(sj4*x349);
IkReal x362=(cj4*x349);
IkReal x363=((1.0)*x350);
evalcond[0]=(((cj1*r02))+x355+x361);
evalcond[1]=((((-1.0)*sj4*x363))+((cj1*r01))+((r11*sj1)));
evalcond[2]=(((r01*x359))+x349+(((-1.0)*x351*x352))+(((-1.0)*r21*x353)));
evalcond[3]=((((-1.0)*r22*x353))+x350+(((-1.0)*x351*x357))+((r02*x359)));
evalcond[4]=(x362+((cj2*r22))+(((-1.0)*x353*x357))+((r02*x358)));
evalcond[5]=((((-1.0)*cj4*x363))+((r01*x358))+((cj2*r21))+(((-1.0)*x352*x353)));
evalcond[6]=((-0.0735)+(((-1.0)*cj1*x354))+(((0.07042834)*x361))+(((0.031)*cj4))+((cj1*px))+(((1.1e-7)*sj4))+(((-1.0)*j7*x355))+((py*sj1)));
evalcond[7]=((0.00025)+((cj2*j7*x357))+((px*x359))+(((-1.0)*sj1*x351*x354))+((sj2*x356))+(((0.07042834)*x350))+(((-1.0)*pz*x353))+(((-1.0)*x351*x360)));
evalcond[8]=((0.00025)+((px*x358))+(((-1.0)*x353*x360))+((j7*sj2*x357))+(((0.07042834)*x362))+(((-0.031)*sj4))+(((-1.0)*sj1*x353*x354))+((cj2*pz))+(((-1.0)*x351*x356))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x364=((1.0)*cj1);
IkReal x365=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x364))+(((-1.0)*r11*x365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x364))+(((-1.0)*r12*x365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x364))+(((-1.0)*r11*x365))))+IKsqr(((((-1.0)*r02*x364))+(((-1.0)*r12*x365))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x364))+(((-1.0)*r11*x365))), ((((-1.0)*r02*x364))+(((-1.0)*r12*x365))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x366=IKcos(j5);
IkReal x367=((1.0)*j7);
IkReal x368=(cj1*r02);
IkReal x369=(r12*sj1);
evalcond[0]=(((cj1*r01))+(IKsin(j5))+((r11*sj1)));
evalcond[1]=(x368+x369+x366);
evalcond[2]=((-0.15125)+(((0.07042834)*x366))+(((-1.0)*x367*x369))+(((-1.0)*x367*x368))+((cj1*px))+((py*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x370=(r00*sj1);
IkReal x371=((1.0)*cj1*r10);
if( IKabs(((((-1.0)*sj2*x371))+((cj2*r20))+((sj2*x370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x370))+(((-1.0)*cj2*x371))+(((-1.0)*r20*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x371))+((cj2*r20))+((sj2*x370))))+IKsqr((((cj2*x370))+(((-1.0)*cj2*x371))+(((-1.0)*r20*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x371))+((cj2*r20))+((sj2*x370))), (((cj2*x370))+(((-1.0)*cj2*x371))+(((-1.0)*r20*sj2))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x372=IKcos(j4);
IkReal x373=IKsin(j4);
IkReal x374=((1.0)*cj2);
IkReal x375=(cj1*r11);
IkReal x376=((1.0)*sj2);
IkReal x377=(r02*sj1);
IkReal x378=(cj2*sj1);
IkReal x379=(j7*r22);
IkReal x380=(cj1*r10);
IkReal x381=(cj1*r12);
IkReal x382=(sj1*sj2);
IkReal x383=(cj1*py);
IkReal x384=(sj5*x372);
IkReal x385=(sj5*x373);
IkReal x386=((1.0)*x372);
evalcond[0]=((((-1.0)*x373))+(((-1.0)*x376*x380))+((cj2*r20))+((r00*x382)));
evalcond[1]=((((-1.0)*x376*x381))+x384+((cj2*r22))+((sj2*x377)));
evalcond[2]=(((cj2*r21))+(((-1.0)*cj5*x386))+(((-1.0)*x375*x376))+((r01*x382)));
evalcond[3]=((((-1.0)*r20*x376))+((r00*x378))+(((-1.0)*x374*x380))+(((-1.0)*x386)));
evalcond[4]=((((-1.0)*r21*x376))+((r01*x378))+((cj5*x373))+(((-1.0)*x374*x375)));
evalcond[5]=((((-1.0)*x374*x381))+(((-1.0)*x385))+((cj2*x377))+(((-1.0)*r22*x376)));
evalcond[6]=((0.00025)+((px*x382))+((j7*sj2*x381))+(((-1.0)*x376*x383))+(((-1.0)*j7*x376*x377))+(((-1.0)*x374*x379))+(((-0.031)*x373))+(((1.1e-7)*x372))+((cj2*pz))+(((0.07042834)*x384)));
evalcond[7]=((-0.078)+(((-0.07042834)*x385))+((cj2*j7*x381))+(((-1.0)*x374*x383))+((px*x378))+(((-0.031)*x372))+(((-1.0)*pz*x376))+((sj2*x379))+(((-1.1e-7)*x373))+(((-1.0)*j7*x374*x377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01))+((r11*sj1))))+IKsqr((((cj1*r02))+((r12*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r01))+((r11*sj1))), (((cj1*r02))+((r12*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x387=IKcos(j5);
IkReal x388=((1.0)*j7);
IkReal x389=(cj1*r02);
IkReal x390=(r12*sj1);
evalcond[0]=(((cj1*r01))+((r11*sj1))+(((-1.0)*(IKsin(j5)))));
evalcond[1]=(x389+x390+(((-1.0)*x387)));
evalcond[2]=((-0.15175)+(((-0.07042834)*x387))+(((-1.0)*x388*x390))+((cj1*px))+((py*sj1))+(((-1.0)*x388*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x391=(r00*sj1);
IkReal x392=(cj1*r10);
if( IKabs(((((-1.0)*sj2*x392))+((sj2*x391))+((cj2*r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj2*x391))+((cj2*x392))+((r20*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj2*x392))+((sj2*x391))+((cj2*r20))))+IKsqr(((((-1.0)*cj2*x391))+((cj2*x392))+((r20*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj2*x392))+((sj2*x391))+((cj2*r20))), ((((-1.0)*cj2*x391))+((cj2*x392))+((r20*sj2))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x393=IKcos(j4);
IkReal x394=IKsin(j4);
IkReal x395=((1.0)*cj2);
IkReal x396=(cj1*r11);
IkReal x397=((1.0)*sj2);
IkReal x398=(r02*sj1);
IkReal x399=(cj2*sj1);
IkReal x400=(j7*r22);
IkReal x401=(cj1*r10);
IkReal x402=(cj1*r12);
IkReal x403=(sj1*sj2);
IkReal x404=(cj1*py);
IkReal x405=((1.0)*cj5);
IkReal x406=(sj5*x393);
IkReal x407=(sj5*x394);
evalcond[0]=((((-1.0)*r20*x397))+((r00*x399))+(((-1.0)*x395*x401))+x393);
evalcond[1]=((((-1.0)*x394))+((r00*x403))+((cj2*r20))+(((-1.0)*x397*x401)));
evalcond[2]=(((sj2*x398))+x406+((cj2*r22))+(((-1.0)*x397*x402)));
evalcond[3]=((((-1.0)*x393*x405))+((r01*x403))+((cj2*r21))+(((-1.0)*x396*x397)));
evalcond[4]=((((-1.0)*x395*x402))+x407+((cj2*x398))+(((-1.0)*r22*x397)));
evalcond[5]=((((-1.0)*r21*x397))+(((-1.0)*x395*x396))+(((-1.0)*x394*x405))+((r01*x399)));
evalcond[6]=((0.00025)+((j7*sj2*x402))+(((1.1e-7)*x393))+(((-1.0)*x395*x400))+((px*x403))+(((-0.031)*x394))+((cj2*pz))+(((-1.0)*x397*x404))+(((-1.0)*j7*x397*x398))+(((0.07042834)*x406)));
evalcond[7]=((0.078)+(((-1.0)*j7*x395*x398))+((sj2*x400))+(((1.1e-7)*x394))+(((-1.0)*x395*x404))+(((-1.0)*pz*x397))+((px*x399))+((cj2*j7*x402))+(((0.07042834)*x407))+(((0.031)*x393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x408=(r00*sj1);
IkReal x409=((1.0)*cj1*r10);
CheckValue<IkReal> x410=IKPowWithIntegerCheck(sj3,-1);
if(!x410.valid){
continue;
}
if( IKabs((((sj2*x408))+((cj2*r20))+(((-1.0)*sj2*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x410.value)*(((((-1.0)*cj2*x409))+((cj2*x408))+(((-1.0)*r20*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x408))+((cj2*r20))+(((-1.0)*sj2*x409))))+IKsqr(((x410.value)*(((((-1.0)*cj2*x409))+((cj2*x408))+(((-1.0)*r20*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((sj2*x408))+((cj2*r20))+(((-1.0)*sj2*x409))), ((x410.value)*(((((-1.0)*cj2*x409))+((cj2*x408))+(((-1.0)*r20*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x411=IKcos(j4);
IkReal x412=(r00*sj1);
IkReal x413=((1.0)*cj1*r10);
IkReal x414=((1.0)*x411);
evalcond[0]=(((r10*sj1))+(((-1.0)*cj3*x414))+((cj1*r00)));
evalcond[1]=((((-1.0)*(IKsin(j4))))+((sj2*x412))+((cj2*r20))+(((-1.0)*sj2*x413)));
evalcond[2]=((((-1.0)*cj2*x413))+((cj2*x412))+(((-1.0)*sj3*x414))+(((-1.0)*r20*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x415=(cj3*sj4);
IkReal x416=(cj1*r02);
IkReal x417=((1.0)*sj1);
IkReal x418=((1.0)*cj1*r01);
IkReal x419=((1.0)+(((-1.0)*(cj3*cj3)*(cj4*cj4))));
j5eval[0]=x419;
j5eval[1]=((IKabs((((r12*sj1*x415))+((x415*x416))+(((-1.0)*r11*sj3*x417))+(((-1.0)*sj3*x418)))))+(IKabs(((((-1.0)*r11*x415*x417))+(((-1.0)*x415*x418))+(((-1.0)*r12*sj3*x417))+(((-1.0)*sj3*x416))))));
j5eval[2]=IKsign(x419);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj4;
j5eval[1]=cj3;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x420=(cj1*cj3);
IkReal x421=((1.0)*sj3);
IkReal x422=(r12*sj1);
IkReal x423=(r11*sj1);
if( IKabs(((((-1.0)*x421*x423))+((r02*x420))+(((-1.0)*cj1*r01*x421))+((cj3*x422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x421*x422))+(((-1.0)*cj3*x423))+(((-1.0)*r01*x420))+(((-1.0)*cj1*r02*x421)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x421*x423))+((r02*x420))+(((-1.0)*cj1*r01*x421))+((cj3*x422))))+IKsqr(((((-1.0)*x421*x422))+(((-1.0)*cj3*x423))+(((-1.0)*r01*x420))+(((-1.0)*cj1*r02*x421))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*x421*x423))+((r02*x420))+(((-1.0)*cj1*r01*x421))+((cj3*x422))), ((((-1.0)*x421*x422))+(((-1.0)*cj3*x423))+(((-1.0)*r01*x420))+(((-1.0)*cj1*r02*x421))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x424=IKcos(j5);
IkReal x425=IKsin(j5);
IkReal x426=(cj1*cj2);
IkReal x427=(r12*sj1);
IkReal x428=((1.0)*sj2);
IkReal x429=((1.0)*cj3);
IkReal x430=(cj2*sj1);
IkReal x431=(sj3*x424);
IkReal x432=((0.07042834)*x424);
IkReal x433=(sj3*x425);
IkReal x434=((1.0)*j7*r02);
IkReal x435=(x425*x429);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x433+((cj3*x424)));
evalcond[1]=((((-1.0)*x435))+((cj1*r02))+x427+x431);
evalcond[2]=((((-1.0)*x435))+(((-1.0)*r11*x426))+(((-1.0)*r21*x428))+x431+((r01*x430)));
evalcond[3]=((((-1.0)*r12*x426))+(((-1.0)*x433))+((r02*x430))+(((-1.0)*x424*x429))+(((-1.0)*r22*x428)));
evalcond[4]=((-0.1515)+(((-0.07800011)*cj3))+(((0.07042834)*x431))+(((-1.0)*cj1*x434))+((cj1*px))+(((-1.0)*j7*x427))+(((0.00025)*sj3))+(((-0.07042834)*cj3*x425))+((py*sj1)));
evalcond[5]=((((-1.0)*x430*x434))+(((-1.0)*cj3*x432))+((px*x430))+(((-1.0)*py*x426))+(((-0.00025)*cj3))+(((-0.07800011)*sj3))+((j7*r22*sj2))+(((-0.07042834)*x433))+((j7*r12*x426))+(((-1.0)*pz*x428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x436=((1.0)*cj1);
IkReal x437=(r11*sj1);
IkReal x438=((1.0)*r12*sj1);
if( IKabs(((((-1.0)*cj3*x438))+(((-1.0)*r01*sj3*x436))+(((-1.0)*cj3*r02*x436))+(((-1.0)*sj3*x437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x438))+(((-1.0)*r02*sj3*x436))+((cj3*x437))+((cj1*cj3*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x438))+(((-1.0)*r01*sj3*x436))+(((-1.0)*cj3*r02*x436))+(((-1.0)*sj3*x437))))+IKsqr(((((-1.0)*sj3*x438))+(((-1.0)*r02*sj3*x436))+((cj3*x437))+((cj1*cj3*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*x438))+(((-1.0)*r01*sj3*x436))+(((-1.0)*cj3*r02*x436))+(((-1.0)*sj3*x437))), ((((-1.0)*sj3*x438))+(((-1.0)*r02*sj3*x436))+((cj3*x437))+((cj1*cj3*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x439=IKsin(j5);
IkReal x440=IKcos(j5);
IkReal x441=(cj1*cj2);
IkReal x442=(r12*sj1);
IkReal x443=((1.0)*sj2);
IkReal x444=((1.0)*cj3);
IkReal x445=((1.0)*j7);
IkReal x446=(cj1*r02);
IkReal x447=(cj2*sj1);
IkReal x448=(sj3*x439);
IkReal x449=((0.07042834)*x440);
IkReal x450=(cj3*x439);
IkReal x451=(sj3*x440);
IkReal x452=(x440*x444);
evalcond[0]=(x446+x442+x450+x451);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x452))+x448);
evalcond[2]=((((-1.0)*r12*x441))+((r02*x447))+(((-1.0)*x452))+x448+(((-1.0)*r22*x443)));
evalcond[3]=((((-1.0)*r11*x441))+(((-1.0)*x451))+(((-1.0)*x439*x444))+((r01*x447))+(((-1.0)*r21*x443)));
evalcond[4]=((-0.1515)+(((-0.07799989)*cj3))+(((-1.0)*x445*x446))+(((0.07042834)*x450))+((cj1*px))+((sj3*x449))+(((0.00025)*sj3))+((py*sj1))+(((-1.0)*x442*x445)));
evalcond[5]=((((-1.0)*cj3*x449))+(((0.07042834)*x448))+(((-0.00025)*cj3))+((px*x447))+(((-1.0)*py*x441))+((j7*r22*sj2))+((j7*r12*x441))+(((-1.0)*pz*x443))+(((-1.0)*r02*x445*x447))+(((-0.07799989)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x453=((1.0)*cj1);
IkReal x454=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x453))+(((-1.0)*r11*x454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x454))+(((-1.0)*r02*x453)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x453))+(((-1.0)*r11*x454))))+IKsqr(((((-1.0)*r12*x454))+(((-1.0)*r02*x453))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x453))+(((-1.0)*r11*x454))), ((((-1.0)*r12*x454))+(((-1.0)*r02*x453))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x455=IKsin(j5);
IkReal x456=IKcos(j5);
IkReal x457=(cj1*cj2);
IkReal x458=((1.0)*r11);
IkReal x459=(cj2*r22);
IkReal x460=((1.0)*sj2);
IkReal x461=(j7*r02);
IkReal x462=(r12*sj1);
IkReal x463=(j7*r12);
IkReal x464=(sj1*sj2);
IkReal x465=(cj2*sj1);
IkReal x466=(cj1*sj2);
IkReal x467=((1.0)*j7);
IkReal x468=(cj4*x455);
IkReal x469=(sj4*x455);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x455);
evalcond[1]=(((cj1*r02))+x456+x462);
evalcond[2]=(x459+x468+((r02*x464))+(((-1.0)*cj1*r12*x460)));
evalcond[3]=((((-1.0)*cj4*x456))+((cj2*r21))+(((-1.0)*x458*x466))+((r01*x464)));
evalcond[4]=(((sj4*x456))+(((-1.0)*r21*x460))+((r01*x465))+(((-1.0)*x457*x458)));
evalcond[5]=((((-1.0)*x469))+((r02*x465))+(((-1.0)*r22*x460))+(((-1.0)*r12*x457)));
evalcond[6]=((-0.15125)+(((-1.0)*x462*x467))+(((-1.0)*cj1*x461))+(((0.07042834)*x456))+((cj1*px))+((py*sj1)));
evalcond[7]=((0.00025)+(((-0.031)*sj4))+(((0.07042834)*x468))+((x463*x466))+(((-1.0)*x459*x467))+((cj2*pz))+(((-1.0)*sj1*x460*x461))+((px*x464))+(((-1.0)*cj1*py*x460))+(((1.1e-7)*cj4)));
evalcond[8]=((-0.078)+(((-1.0)*x461*x465))+(((-0.07042834)*x469))+(((-0.031)*cj4))+((j7*r22*sj2))+(((-1.0)*py*x457))+(((-1.0)*pz*x460))+((px*x465))+(((-1.1e-7)*sj4))+((x457*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01))+((r11*sj1))))+IKsqr((((cj1*r02))+((r12*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r01))+((r11*sj1))), (((cj1*r02))+((r12*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x470=IKsin(j5);
IkReal x471=IKcos(j5);
IkReal x472=((1.0)*cj2);
IkReal x473=(cj1*r11);
IkReal x474=((1.0)*sj2);
IkReal x475=(j7*r02);
IkReal x476=(r12*sj1);
IkReal x477=(j7*r22);
IkReal x478=(cj1*r12);
IkReal x479=(sj1*sj2);
IkReal x480=(cj1*py);
IkReal x481=(cj2*sj1);
IkReal x482=(sj4*x470);
IkReal x483=(cj4*x470);
IkReal x484=((1.0)*x471);
evalcond[0]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x470)));
evalcond[1]=((((-1.0)*x484))+((cj1*r02))+x476);
evalcond[2]=(((r02*x479))+x483+((cj2*r22))+(((-1.0)*x474*x478)));
evalcond[3]=((((-1.0)*x473*x474))+((cj2*r21))+(((-1.0)*cj4*x484))+((r01*x479)));
evalcond[4]=(((r02*x481))+(((-1.0)*x472*x478))+(((-1.0)*r22*x474))+x482);
evalcond[5]=((((-1.0)*r21*x474))+(((-1.0)*x472*x473))+((r01*x481))+(((-1.0)*sj4*x484)));
evalcond[6]=((-0.15175)+(((-1.0)*cj1*x475))+(((-1.0)*j7*x476))+((cj1*px))+((py*sj1))+(((-0.07042834)*x471)));
evalcond[7]=((0.00025)+(((-0.031)*sj4))+(((-1.0)*x474*x480))+(((-1.0)*x472*x477))+((j7*sj2*x478))+(((-1.0)*sj1*x474*x475))+(((0.07042834)*x483))+((cj2*pz))+((px*x479))+(((1.1e-7)*cj4)));
evalcond[8]=((0.078)+((cj2*j7*x478))+(((0.031)*cj4))+(((-1.0)*pz*x474))+((px*x481))+(((-1.0)*sj1*x472*x475))+(((1.1e-7)*sj4))+(((0.07042834)*x482))+((sj2*x477))+(((-1.0)*x472*x480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x485=((1.0)*cj1);
IkReal x486=((1.0)*sj1);
j5eval[0]=sj3;
j5eval[1]=((IKabs(((((-1.0)*r01*x485))+(((-1.0)*r11*x486)))))+(IKabs(((((-1.0)*r12*x486))+(((-1.0)*r02*x485))))));
j5eval[2]=IKsign(sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=sj3;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x487=((1.0)*sj2);
if( IKabs(((((-1.0)*r02*sj1*x487))+((cj1*r12*sj2))+(((-1.0)*cj2*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r11*x487))+((cj2*r21))+((r01*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*sj1*x487))+((cj1*r12*sj2))+(((-1.0)*cj2*r22))))+IKsqr(((((-1.0)*cj1*r11*x487))+((cj2*r21))+((r01*sj1*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r02*sj1*x487))+((cj1*r12*sj2))+(((-1.0)*cj2*r22))), ((((-1.0)*cj1*r11*x487))+((cj2*r21))+((r01*sj1*sj2))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x488=IKsin(j5);
IkReal x489=IKcos(j5);
IkReal x490=((1.0)*cj2);
IkReal x491=(cj1*r11);
IkReal x492=((1.0)*sj2);
IkReal x493=(r02*sj1);
IkReal x494=(cj2*sj1);
IkReal x495=(j7*r22);
IkReal x496=(cj1*r12);
IkReal x497=(sj1*sj2);
IkReal x498=(cj1*py);
IkReal x499=((1.0)*x489);
evalcond[0]=(x488+((cj2*r22))+((sj2*x493))+(((-1.0)*x492*x496)));
evalcond[1]=((((-1.0)*x499))+(((-1.0)*x491*x492))+((cj2*r21))+((r01*x497)));
evalcond[2]=((((-1.0)*r21*x492))+(((-1.0)*x490*x491))+(((-1.0)*x488))+((r01*x494)));
evalcond[3]=((((-1.0)*x499))+(((-1.0)*x490*x496))+(((-1.0)*r22*x492))+((cj2*x493)));
evalcond[4]=((0.00025011)+((j7*sj2*x496))+(((-1.0)*j7*x492*x493))+(((-1.0)*x490*x495))+((px*x497))+(((0.07042834)*x488))+((cj2*pz))+(((-1.0)*x492*x498)));
evalcond[5]=((-0.00025)+(((-1.0)*j7*x490*x493))+(((-1.0)*x490*x498))+((cj2*j7*x496))+((px*x494))+((sj2*x495))+(((-1.0)*pz*x492))+(((-0.07042834)*x489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x500=(cj1*r12);
IkReal x501=((1.0)*r02*sj1);
if( IKabs((((sj2*x500))+(((-1.0)*sj2*x501))+(((-1.0)*cj2*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x500))+((r22*sj2))+(((-1.0)*cj2*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x500))+(((-1.0)*sj2*x501))+(((-1.0)*cj2*r22))))+IKsqr((((cj2*x500))+((r22*sj2))+(((-1.0)*cj2*x501))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((sj2*x500))+(((-1.0)*sj2*x501))+(((-1.0)*cj2*r22))), (((cj2*x500))+((r22*sj2))+(((-1.0)*cj2*x501))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x502=IKsin(j5);
IkReal x503=IKcos(j5);
IkReal x504=((1.0)*cj2);
IkReal x505=(cj1*r11);
IkReal x506=((1.0)*sj2);
IkReal x507=(r02*sj1);
IkReal x508=(cj2*sj1);
IkReal x509=(j7*r22);
IkReal x510=(cj1*r12);
IkReal x511=(sj1*sj2);
IkReal x512=(cj1*py);
evalcond[0]=(((sj2*x507))+((cj2*r22))+x502+(((-1.0)*x506*x510)));
evalcond[1]=(((r01*x508))+x502+(((-1.0)*x504*x505))+(((-1.0)*r21*x506)));
evalcond[2]=(((cj2*x507))+(((-1.0)*x504*x510))+(((-1.0)*r22*x506))+x503);
evalcond[3]=(((r01*x511))+(((-1.0)*x505*x506))+((cj2*r21))+(((-1.0)*x503)));
evalcond[4]=((0.00025011)+((px*x511))+(((0.07042834)*x502))+((cj2*pz))+(((-1.0)*x506*x512))+(((-1.0)*x504*x509))+(((-1.0)*j7*x506*x507))+((j7*sj2*x510)));
evalcond[5]=((0.00025)+(((-1.0)*j7*x504*x507))+((sj2*x509))+(((-1.0)*pz*x506))+((cj2*j7*x510))+(((-1.0)*x504*x512))+(((0.07042834)*x503))+((px*x508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x513=((1.0)*cj1);
IkReal x514=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x513))+(((-1.0)*r11*x514)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x514))+(((-1.0)*r02*x513)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x513))+(((-1.0)*r11*x514))))+IKsqr(((((-1.0)*r12*x514))+(((-1.0)*r02*x513))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x513))+(((-1.0)*r11*x514))), ((((-1.0)*r12*x514))+(((-1.0)*r02*x513))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x515=IKsin(j5);
IkReal x516=IKcos(j5);
IkReal x517=(cj2*r22);
IkReal x518=((1.0)*j7);
IkReal x519=(r12*sj1);
IkReal x520=(cj1*r02);
IkReal x521=(sj1*sj2);
IkReal x522=(r02*x521);
IkReal x523=((1.0)*cj1*sj2);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x515);
evalcond[1]=(x520+x519+x516);
evalcond[2]=(x522+x517+x515+(((-1.0)*r12*x523)));
evalcond[3]=((((-1.0)*x516))+((cj2*r21))+(((-1.0)*r11*x523))+((r01*x521)));
evalcond[4]=((-0.15125)+((cj1*px))+(((-1.0)*x518*x519))+(((-1.0)*x518*x520))+(((0.07042834)*x516))+((py*sj1)));
evalcond[5]=((0.00025011)+((cj1*j7*r12*sj2))+(((-1.0)*x517*x518))+(((-1.0)*x518*x522))+((px*x521))+(((-1.0)*py*x523))+((cj2*pz))+(((0.07042834)*x515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01))+((r11*sj1))))+IKsqr((((cj1*r02))+((r12*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r01))+((r11*sj1))), (((cj1*r02))+((r12*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x524=IKsin(j5);
IkReal x525=IKcos(j5);
IkReal x526=(cj2*r22);
IkReal x527=((1.0)*j7);
IkReal x528=(r12*sj1);
IkReal x529=(cj1*r02);
IkReal x530=(sj1*sj2);
IkReal x531=((1.0)*x525);
IkReal x532=(r02*x530);
IkReal x533=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x524))+((cj1*r01))+((r11*sj1)));
evalcond[1]=((((-1.0)*x531))+x528+x529);
evalcond[2]=(x532+x526+x524+(((-1.0)*r12*x533)));
evalcond[3]=((((-1.0)*x531))+((cj2*r21))+(((-1.0)*r11*x533))+((r01*x530)));
evalcond[4]=((-0.15175)+(((-1.0)*x527*x528))+(((-1.0)*x527*x529))+(((-0.07042834)*x525))+((cj1*px))+((py*sj1)));
evalcond[5]=((0.00025011)+(((-1.0)*x526*x527))+(((-1.0)*x527*x532))+((cj1*j7*r12*sj2))+((px*x530))+(((-1.0)*py*x533))+((cj2*pz))+(((0.07042834)*x524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x534=((1.0)*cj1);
CheckValue<IkReal> x535=IKPowWithIntegerCheck(sj3,-1);
if(!x535.valid){
continue;
}
CheckValue<IkReal> x536=IKPowWithIntegerCheck(cj3,-1);
if(!x536.valid){
continue;
}
if( IKabs(((x535.value)*(((((-1.0)*r01*x534))+(((-1.0)*r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x536.value)*(((((-1.0)*cj2*r12*x534))+((cj2*r02*sj1))+(((-1.0)*r22*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x535.value)*(((((-1.0)*r01*x534))+(((-1.0)*r11*sj1))))))+IKsqr(((x536.value)*(((((-1.0)*cj2*r12*x534))+((cj2*r02*sj1))+(((-1.0)*r22*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x535.value)*(((((-1.0)*r01*x534))+(((-1.0)*r11*sj1))))), ((x536.value)*(((((-1.0)*cj2*r12*x534))+((cj2*r02*sj1))+(((-1.0)*r22*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x537=IKsin(j5);
IkReal x538=IKcos(j5);
IkReal x539=((1.0)*cj2);
IkReal x540=(cj1*r11);
IkReal x541=((1.0)*sj2);
IkReal x542=(j7*r02);
IkReal x543=(r12*sj1);
IkReal x544=(j7*r22);
IkReal x545=(cj1*r12);
IkReal x546=(sj1*sj2);
IkReal x547=(cj2*sj1);
IkReal x548=(cj1*py);
IkReal x549=((0.07042834)*x538);
IkReal x550=((1.0)*x538);
evalcond[0]=(((sj3*x537))+((cj1*r01))+((r11*sj1)));
evalcond[1]=(((sj3*x538))+((cj1*r02))+x543);
evalcond[2]=((((-1.0)*x541*x545))+((r02*x546))+((cj2*r22))+x537);
evalcond[3]=((((-1.0)*x540*x541))+(((-1.0)*x550))+((cj2*r21))+((r01*x546)));
evalcond[4]=((((-1.0)*x539*x540))+(((-1.0)*cj3*x537))+(((-1.0)*r21*x541))+((r01*x547)));
evalcond[5]=((((-1.0)*r22*x541))+((r02*x547))+(((-1.0)*x539*x545))+(((-1.0)*cj3*x550)));
evalcond[6]=((-0.1515)+(((-1.0)*j7*x543))+((sj3*x549))+((cj1*px))+(((-0.109)*cj3))+(((-1.0)*cj1*x542))+(((0.00025)*sj3))+((py*sj1)));
evalcond[7]=((0.00025011)+(((-1.0)*x541*x548))+((j7*sj2*x545))+(((-1.0)*x539*x544))+((px*x546))+(((-1.0)*sj1*x541*x542))+((cj2*pz))+(((0.07042834)*x537)));
evalcond[8]=((((-0.00025)*cj3))+(((-1.0)*cj3*x549))+(((-1.0)*x539*x548))+(((-1.0)*sj1*x539*x542))+((sj2*x544))+((px*x547))+((cj2*j7*x545))+(((-1.0)*pz*x541))+(((-0.109)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x551=((1.0)*cj1);
CheckValue<IkReal> x552=IKPowWithIntegerCheck(sj3,-1);
if(!x552.valid){
continue;
}
if( IKabs(((x552.value)*(((((-1.0)*r01*x551))+(((-1.0)*r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*r21))+(((-1.0)*r11*sj2*x551))+((r01*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x552.value)*(((((-1.0)*r01*x551))+(((-1.0)*r11*sj1))))))+IKsqr((((cj2*r21))+(((-1.0)*r11*sj2*x551))+((r01*sj1*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x552.value)*(((((-1.0)*r01*x551))+(((-1.0)*r11*sj1))))), (((cj2*r21))+(((-1.0)*r11*sj2*x551))+((r01*sj1*sj2))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x553=IKsin(j5);
IkReal x554=IKcos(j5);
IkReal x555=((1.0)*cj2);
IkReal x556=(cj1*r11);
IkReal x557=((1.0)*sj2);
IkReal x558=(j7*r02);
IkReal x559=(r12*sj1);
IkReal x560=(j7*r22);
IkReal x561=(cj1*r12);
IkReal x562=(sj1*sj2);
IkReal x563=(cj2*sj1);
IkReal x564=(cj1*py);
IkReal x565=((0.07042834)*x554);
IkReal x566=((1.0)*x554);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj3*x553)));
evalcond[1]=(((cj1*r02))+((sj3*x554))+x559);
evalcond[2]=((((-1.0)*x557*x561))+((cj2*r22))+x553+((r02*x562)));
evalcond[3]=((((-1.0)*x556*x557))+((r01*x562))+((cj2*r21))+(((-1.0)*x566)));
evalcond[4]=((((-1.0)*x555*x556))+((r01*x563))+(((-1.0)*r21*x557))+(((-1.0)*cj3*x553)));
evalcond[5]=((((-1.0)*cj3*x566))+(((-1.0)*r22*x557))+(((-1.0)*x555*x561))+((r02*x563)));
evalcond[6]=((-0.1515)+((sj3*x565))+((cj1*px))+(((-0.109)*cj3))+(((0.00025)*sj3))+(((-1.0)*cj1*x558))+((py*sj1))+(((-1.0)*j7*x559)));
evalcond[7]=((0.00025011)+((j7*sj2*x561))+(((-1.0)*x555*x560))+(((-1.0)*x557*x564))+(((-1.0)*sj1*x557*x558))+(((0.07042834)*x553))+((cj2*pz))+((px*x562)));
evalcond[8]=((((-1.0)*cj3*x565))+((cj2*j7*x561))+(((-0.00025)*cj3))+(((-1.0)*x555*x564))+(((-1.0)*sj1*x555*x558))+(((-1.0)*pz*x557))+((px*x563))+((sj2*x560))+(((-0.109)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x567=((1.0)*cj1);
IkReal x568=((1.0)*sj1);
CheckValue<IkReal> x569=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x569.valid){
continue;
}
CheckValue<IkReal> x570 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x568))+(((-1.0)*r01*x567)))),IkReal(((((-1.0)*r12*x568))+(((-1.0)*r02*x567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x569.value)))+(x570.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x571=IKsin(j5);
IkReal x572=IKcos(j5);
IkReal x573=((1.0)*cj2);
IkReal x574=(cj1*r11);
IkReal x575=((1.0)*sj2);
IkReal x576=(j7*r02);
IkReal x577=(r12*sj1);
IkReal x578=(j7*r22);
IkReal x579=(cj1*r12);
IkReal x580=(sj1*sj2);
IkReal x581=(cj2*sj1);
IkReal x582=(cj1*py);
IkReal x583=((0.07042834)*x572);
IkReal x584=((1.0)*x572);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj3*x571)));
evalcond[1]=(((cj1*r02))+((sj3*x572))+x577);
evalcond[2]=(((r02*x580))+(((-1.0)*x575*x579))+((cj2*r22))+x571);
evalcond[3]=((((-1.0)*x574*x575))+((cj2*r21))+((r01*x580))+(((-1.0)*x584)));
evalcond[4]=((((-1.0)*x573*x574))+(((-1.0)*cj3*x571))+((r01*x581))+(((-1.0)*r21*x575)));
evalcond[5]=((((-1.0)*x573*x579))+((r02*x581))+(((-1.0)*r22*x575))+(((-1.0)*cj3*x584)));
evalcond[6]=((-0.1515)+((sj3*x583))+((cj1*px))+(((-0.109)*cj3))+(((0.00025)*sj3))+(((-1.0)*j7*x577))+((py*sj1))+(((-1.0)*cj1*x576)));
evalcond[7]=((0.00025011)+(((-1.0)*sj1*x575*x576))+((j7*sj2*x579))+((px*x580))+(((-1.0)*x573*x578))+((cj2*pz))+(((-1.0)*x575*x582))+(((0.07042834)*x571)));
evalcond[8]=((((-0.00025)*cj3))+((px*x581))+(((-1.0)*x573*x582))+((cj2*j7*x579))+((sj2*x578))+(((-1.0)*pz*x575))+(((-1.0)*cj3*x583))+(((-1.0)*sj1*x573*x576))+(((-0.109)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x585=((1.0)*cj1);
IkReal x586=((1.0)*sj1);
j5eval[0]=sj3;
j5eval[1]=((IKabs(((((-1.0)*r11*x586))+(((-1.0)*r01*x585)))))+(IKabs(((((-1.0)*r02*x585))+(((-1.0)*r12*x586))))));
j5eval[2]=IKsign(sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=sj3;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x587=(cj1*sj2);
IkReal x588=(sj1*sj2);
if( IKabs((((r02*x588))+((cj2*r22))+(((-1.0)*r12*x587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x587))+(((-1.0)*cj2*r21))+(((-1.0)*r01*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x588))+((cj2*r22))+(((-1.0)*r12*x587))))+IKsqr((((r11*x587))+(((-1.0)*cj2*r21))+(((-1.0)*r01*x588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r02*x588))+((cj2*r22))+(((-1.0)*r12*x587))), (((r11*x587))+(((-1.0)*cj2*r21))+(((-1.0)*r01*x588))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x589=IKcos(j5);
IkReal x590=IKsin(j5);
IkReal x591=((1.0)*cj2);
IkReal x592=(cj1*r11);
IkReal x593=((1.0)*sj2);
IkReal x594=(r02*sj1);
IkReal x595=(cj2*sj1);
IkReal x596=(j7*r22);
IkReal x597=(cj1*r12);
IkReal x598=(sj1*sj2);
IkReal x599=(cj1*py);
IkReal x600=((1.0)*x590);
evalcond[0]=(((r01*x598))+(((-1.0)*x592*x593))+((cj2*r21))+x589);
evalcond[1]=((((-1.0)*x593*x597))+((cj2*r22))+(((-1.0)*x600))+((sj2*x594)));
evalcond[2]=((((-1.0)*r21*x593))+((r01*x595))+(((-1.0)*x600))+(((-1.0)*x591*x592)));
evalcond[3]=((((-1.0)*x589))+((cj2*x594))+(((-1.0)*r22*x593))+(((-1.0)*x591*x597)));
evalcond[4]=((0.00024989)+(((-1.0)*j7*x593*x594))+(((-1.0)*x593*x599))+(((-0.07042834)*x590))+((cj2*pz))+((j7*sj2*x597))+((px*x598))+(((-1.0)*x591*x596)));
evalcond[5]=((-0.00025)+(((-0.07042834)*x589))+(((-1.0)*pz*x593))+(((-1.0)*j7*x591*x594))+((px*x595))+((sj2*x596))+(((-1.0)*x591*x599))+((cj2*j7*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x601=((1.0)*cj2);
IkReal x602=(cj1*r11);
IkReal x603=(r01*sj1);
if( IKabs((((r21*sj2))+((cj2*x602))+(((-1.0)*x601*x603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x603))+((sj2*x602))+(((-1.0)*r21*x601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj2))+((cj2*x602))+(((-1.0)*x601*x603))))+IKsqr(((((-1.0)*sj2*x603))+((sj2*x602))+(((-1.0)*r21*x601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*sj2))+((cj2*x602))+(((-1.0)*x601*x603))), ((((-1.0)*sj2*x603))+((sj2*x602))+(((-1.0)*r21*x601))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x604=IKcos(j5);
IkReal x605=IKsin(j5);
IkReal x606=((1.0)*cj2);
IkReal x607=(cj1*r11);
IkReal x608=((1.0)*sj2);
IkReal x609=(r02*sj1);
IkReal x610=(cj2*sj1);
IkReal x611=(j7*r22);
IkReal x612=(cj1*r12);
IkReal x613=(sj1*sj2);
IkReal x614=(cj1*py);
evalcond[0]=(((r01*x613))+((cj2*r21))+x604+(((-1.0)*x607*x608)));
evalcond[1]=(((r01*x610))+x605+(((-1.0)*x606*x607))+(((-1.0)*r21*x608)));
evalcond[2]=(((cj2*x609))+(((-1.0)*r22*x608))+(((-1.0)*x606*x612))+x604);
evalcond[3]=((((-1.0)*x605))+((cj2*r22))+((sj2*x609))+(((-1.0)*x608*x612)));
evalcond[4]=((0.00024989)+((px*x613))+((j7*sj2*x612))+(((-1.0)*j7*x608*x609))+(((-1.0)*x606*x611))+((cj2*pz))+(((-1.0)*x608*x614))+(((-0.07042834)*x605)));
evalcond[5]=((0.00025)+((cj2*j7*x612))+(((0.07042834)*x604))+((px*x610))+(((-1.0)*x606*x614))+(((-1.0)*j7*x606*x609))+(((-1.0)*pz*x608))+((sj2*x611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x615=((1.0)*cj1);
IkReal x616=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x615))+(((-1.0)*r11*x616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x616))+(((-1.0)*r02*x615)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x615))+(((-1.0)*r11*x616))))+IKsqr(((((-1.0)*r12*x616))+(((-1.0)*r02*x615))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x615))+(((-1.0)*r11*x616))), ((((-1.0)*r12*x616))+(((-1.0)*r02*x615))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x617=IKcos(j5);
IkReal x618=IKsin(j5);
IkReal x619=(cj2*r22);
IkReal x620=((1.0)*j7);
IkReal x621=(r12*sj1);
IkReal x622=(cj1*r02);
IkReal x623=(sj1*sj2);
IkReal x624=(r02*x623);
IkReal x625=((1.0)*cj1*sj2);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x618);
evalcond[1]=(x617+x621+x622);
evalcond[2]=((((-1.0)*r11*x625))+((cj2*r21))+((r01*x623))+x617);
evalcond[3]=((((-1.0)*r12*x625))+(((-1.0)*x618))+x619+x624);
evalcond[4]=((-0.15125)+(((0.07042834)*x617))+(((-1.0)*x620*x622))+(((-1.0)*x620*x621))+((cj1*px))+((py*sj1)));
evalcond[5]=((0.00024989)+(((-1.0)*x620*x624))+((cj1*j7*r12*sj2))+(((-1.0)*x619*x620))+((cj2*pz))+((px*x623))+(((-0.07042834)*x618))+(((-1.0)*py*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01))+((r11*sj1))))+IKsqr((((cj1*r02))+((r12*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r01))+((r11*sj1))), (((cj1*r02))+((r12*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x626=IKcos(j5);
IkReal x627=IKsin(j5);
IkReal x628=(cj2*r22);
IkReal x629=((1.0)*j7);
IkReal x630=(r12*sj1);
IkReal x631=(cj1*r02);
IkReal x632=(sj1*sj2);
IkReal x633=((1.0)*x627);
IkReal x634=(r02*x632);
IkReal x635=((1.0)*cj1*sj2);
evalcond[0]=(((cj1*r01))+(((-1.0)*x633))+((r11*sj1)));
evalcond[1]=(x630+x631+(((-1.0)*x626)));
evalcond[2]=((((-1.0)*r11*x635))+((r01*x632))+((cj2*r21))+x626);
evalcond[3]=((((-1.0)*r12*x635))+(((-1.0)*x633))+x628+x634);
evalcond[4]=((-0.15175)+(((-1.0)*x629*x631))+(((-1.0)*x629*x630))+((cj1*px))+(((-0.07042834)*x626))+((py*sj1)));
evalcond[5]=((0.00024989)+(((-1.0)*x629*x634))+(((-1.0)*x628*x629))+((cj1*j7*r12*sj2))+(((-0.07042834)*x627))+((cj2*pz))+((px*x632))+(((-1.0)*py*x635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x636=((1.0)*cj1);
CheckValue<IkReal> x637=IKPowWithIntegerCheck(sj3,-1);
if(!x637.valid){
continue;
}
CheckValue<IkReal> x638=IKPowWithIntegerCheck(cj3,-1);
if(!x638.valid){
continue;
}
if( IKabs(((x637.value)*(((((-1.0)*r01*x636))+(((-1.0)*r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x638.value)*(((((-1.0)*cj2*r12*x636))+((cj2*r02*sj1))+(((-1.0)*r22*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x637.value)*(((((-1.0)*r01*x636))+(((-1.0)*r11*sj1))))))+IKsqr(((x638.value)*(((((-1.0)*cj2*r12*x636))+((cj2*r02*sj1))+(((-1.0)*r22*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x637.value)*(((((-1.0)*r01*x636))+(((-1.0)*r11*sj1))))), ((x638.value)*(((((-1.0)*cj2*r12*x636))+((cj2*r02*sj1))+(((-1.0)*r22*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x639=IKcos(j5);
IkReal x640=IKsin(j5);
IkReal x641=((1.0)*cj2);
IkReal x642=(cj1*r11);
IkReal x643=((1.0)*sj2);
IkReal x644=(j7*r02);
IkReal x645=(r12*sj1);
IkReal x646=(j7*r22);
IkReal x647=((1.0)*cj3);
IkReal x648=(cj1*r12);
IkReal x649=(sj1*sj2);
IkReal x650=(cj2*sj1);
IkReal x651=(cj1*py);
IkReal x652=((0.07042834)*x639);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj3*x640)));
evalcond[1]=(((cj1*r02))+((sj3*x639))+x645);
evalcond[2]=((((-1.0)*x642*x643))+((cj2*r21))+x639+((r01*x649)));
evalcond[3]=((((-1.0)*x640))+((r02*x649))+((cj2*r22))+(((-1.0)*x643*x648)));
evalcond[4]=((((-1.0)*x640*x647))+(((-1.0)*x641*x642))+(((-1.0)*r21*x643))+((r01*x650)));
evalcond[5]=((((-1.0)*x641*x648))+(((-1.0)*x639*x647))+((r02*x650))+(((-1.0)*r22*x643)));
evalcond[6]=((-0.1515)+(((-1.0)*j7*x645))+(((-0.047)*cj3))+(((-1.0)*cj1*x644))+((sj3*x652))+((cj1*px))+(((0.00025)*sj3))+((py*sj1)));
evalcond[7]=((0.00024989)+(((-1.0)*sj1*x643*x644))+((j7*sj2*x648))+(((-1.0)*x641*x646))+((px*x649))+(((-1.0)*x643*x651))+((cj2*pz))+(((-0.07042834)*x640)));
evalcond[8]=((((-1.0)*x641*x651))+(((-0.00025)*cj3))+((cj2*j7*x648))+(((-0.047)*sj3))+(((-1.0)*cj3*x652))+(((-1.0)*sj1*x641*x644))+((sj2*x646))+((px*x650))+(((-1.0)*pz*x643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x653=((1.0)*cj1);
CheckValue<IkReal> x654=IKPowWithIntegerCheck(sj3,-1);
if(!x654.valid){
continue;
}
if( IKabs(((((-1.0)*r12*sj2*x653))+((cj2*r22))+((r02*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x654.value)*(((((-1.0)*r02*x653))+(((-1.0)*r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj2*x653))+((cj2*r22))+((r02*sj1*sj2))))+IKsqr(((x654.value)*(((((-1.0)*r02*x653))+(((-1.0)*r12*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r12*sj2*x653))+((cj2*r22))+((r02*sj1*sj2))), ((x654.value)*(((((-1.0)*r02*x653))+(((-1.0)*r12*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x655=IKcos(j5);
IkReal x656=IKsin(j5);
IkReal x657=((1.0)*cj2);
IkReal x658=(cj1*r11);
IkReal x659=((1.0)*sj2);
IkReal x660=(j7*r02);
IkReal x661=(r12*sj1);
IkReal x662=(j7*r22);
IkReal x663=((1.0)*cj3);
IkReal x664=(cj1*r12);
IkReal x665=(sj1*sj2);
IkReal x666=(cj2*sj1);
IkReal x667=(cj1*py);
IkReal x668=((0.07042834)*x655);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj3*x656)));
evalcond[1]=(((cj1*r02))+((sj3*x655))+x661);
evalcond[2]=(((r01*x665))+((cj2*r21))+x655+(((-1.0)*x658*x659)));
evalcond[3]=((((-1.0)*x659*x664))+(((-1.0)*x656))+((r02*x665))+((cj2*r22)));
evalcond[4]=(((r01*x666))+(((-1.0)*x657*x658))+(((-1.0)*x656*x663))+(((-1.0)*r21*x659)));
evalcond[5]=((((-1.0)*r22*x659))+(((-1.0)*x657*x664))+((r02*x666))+(((-1.0)*x655*x663)));
evalcond[6]=((-0.1515)+(((-0.047)*cj3))+(((-1.0)*cj1*x660))+((cj1*px))+(((0.00025)*sj3))+((sj3*x668))+((py*sj1))+(((-1.0)*j7*x661)));
evalcond[7]=((0.00024989)+(((-1.0)*x659*x667))+((j7*sj2*x664))+((px*x665))+(((-1.0)*x657*x662))+((cj2*pz))+(((-0.07042834)*x656))+(((-1.0)*sj1*x659*x660)));
evalcond[8]=((((-0.00025)*cj3))+((cj2*j7*x664))+(((-1.0)*cj3*x668))+(((-0.047)*sj3))+((px*x666))+(((-1.0)*x657*x667))+(((-1.0)*sj1*x657*x660))+(((-1.0)*pz*x659))+((sj2*x662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x669=((1.0)*cj1);
IkReal x670=((1.0)*sj1);
CheckValue<IkReal> x671=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x669))+(((-1.0)*r11*x670)))),IkReal(((((-1.0)*r12*x670))+(((-1.0)*r02*x669)))),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x671.value)))+(x672.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x673=IKcos(j5);
IkReal x674=IKsin(j5);
IkReal x675=((1.0)*cj2);
IkReal x676=(cj1*r11);
IkReal x677=((1.0)*sj2);
IkReal x678=(j7*r02);
IkReal x679=(r12*sj1);
IkReal x680=(j7*r22);
IkReal x681=((1.0)*cj3);
IkReal x682=(cj1*r12);
IkReal x683=(sj1*sj2);
IkReal x684=(cj2*sj1);
IkReal x685=(cj1*py);
IkReal x686=((0.07042834)*x673);
evalcond[0]=(((sj3*x674))+((cj1*r01))+((r11*sj1)));
evalcond[1]=(((sj3*x673))+((cj1*r02))+x679);
evalcond[2]=(((cj2*r21))+(((-1.0)*x676*x677))+x673+((r01*x683)));
evalcond[3]=(((cj2*r22))+(((-1.0)*x674))+(((-1.0)*x677*x682))+((r02*x683)));
evalcond[4]=((((-1.0)*x675*x676))+(((-1.0)*r21*x677))+(((-1.0)*x674*x681))+((r01*x684)));
evalcond[5]=((((-1.0)*r22*x677))+(((-1.0)*x675*x682))+(((-1.0)*x673*x681))+((r02*x684)));
evalcond[6]=((-0.1515)+(((-0.047)*cj3))+((sj3*x686))+((cj1*px))+(((-1.0)*j7*x679))+(((0.00025)*sj3))+(((-1.0)*cj1*x678))+((py*sj1)));
evalcond[7]=((0.00024989)+((px*x683))+((j7*sj2*x682))+(((-0.07042834)*x674))+(((-1.0)*x675*x680))+((cj2*pz))+(((-1.0)*sj1*x677*x678))+(((-1.0)*x677*x685)));
evalcond[8]=(((px*x684))+(((-0.00025)*cj3))+(((-0.047)*sj3))+((sj2*x680))+(((-1.0)*x675*x685))+((cj2*j7*x682))+(((-1.0)*pz*x677))+(((-1.0)*sj1*x675*x678))+(((-1.0)*cj3*x686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))))+(IKabs((((cj1*r02))+((r12*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
j5eval[1]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((r12*sj1))))+IKsqr(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r02))+((r12*sj1))), ((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x687=IKcos(j5);
IkReal x688=IKsin(j5);
IkReal x689=(cj1*cj2);
IkReal x690=(r12*sj1);
IkReal x691=((1.0)*sj2);
IkReal x692=((1.0)*j7);
IkReal x693=(cj1*r02);
IkReal x694=(cj2*sj1);
IkReal x695=((1.0)*x688);
IkReal x696=(r02*x694);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x687);
evalcond[1]=(x690+x693+(((-1.0)*x695)));
evalcond[2]=((((-1.0)*r11*x689))+(((-1.0)*x695))+(((-1.0)*r21*x691))+((r01*x694)));
evalcond[3]=((((-1.0)*r12*x689))+x696+(((-1.0)*r22*x691))+(((-1.0)*x687)));
evalcond[4]=((-0.22950011)+((cj1*px))+(((-0.07042834)*x688))+(((-1.0)*x692*x693))+(((-1.0)*x690*x692))+((py*sj1)));
evalcond[5]=((-0.00025)+((j7*r12*x689))+(((-1.0)*py*x689))+((j7*r22*sj2))+(((-0.07042834)*x687))+((px*x694))+(((-1.0)*x692*x696))+(((-1.0)*pz*x691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))))+IKsqr((((cj1*r01))+((r11*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))), (((cj1*r01))+((r11*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x697=IKsin(j5);
IkReal x698=IKcos(j5);
IkReal x699=(cj1*cj2);
IkReal x700=(r12*sj1);
IkReal x701=((1.0)*sj2);
IkReal x702=((1.0)*j7);
IkReal x703=(cj1*r02);
IkReal x704=(cj2*sj1);
IkReal x705=((1.0)*x698);
IkReal x706=(r02*x704);
evalcond[0]=(x697+x703+x700);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x705)));
evalcond[2]=((((-1.0)*r11*x699))+((r01*x704))+(((-1.0)*r21*x701))+(((-1.0)*x697)));
evalcond[3]=((((-1.0)*x705))+x706+(((-1.0)*r12*x699))+(((-1.0)*r22*x701)));
evalcond[4]=((-0.22949989)+(((-1.0)*x702*x703))+((cj1*px))+(((0.07042834)*x697))+((py*sj1))+(((-1.0)*x700*x702)));
evalcond[5]=((-0.00025)+(((-1.0)*pz*x701))+(((-1.0)*x702*x706))+(((-1.0)*py*x699))+((j7*r22*sj2))+((j7*r12*x699))+((px*x704))+(((-0.07042834)*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x707=IKPowWithIntegerCheck(sj4,-1);
if(!x707.valid){
continue;
}
CheckValue<IkReal> x708=IKPowWithIntegerCheck(cj4,-1);
if(!x708.valid){
continue;
}
if( IKabs(((x707.value)*((((cj1*r02))+((r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x708.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x707.value)*((((cj1*r02))+((r12*sj1))))))+IKsqr(((x708.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x707.value)*((((cj1*r02))+((r12*sj1))))), ((x708.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x709=IKsin(j5);
IkReal x710=IKcos(j5);
IkReal x711=(cj1*cj2);
IkReal x712=((1.0)*r11);
IkReal x713=(cj2*r22);
IkReal x714=((1.0)*sj2);
IkReal x715=(j7*r02);
IkReal x716=(r12*sj1);
IkReal x717=(j7*r12);
IkReal x718=(sj1*sj2);
IkReal x719=(cj2*sj1);
IkReal x720=(cj1*sj2);
IkReal x721=((1.0)*j7);
IkReal x722=((1.0)*x709);
IkReal x723=(cj4*x709);
IkReal x724=((1.0)*x710);
evalcond[0]=(((sj4*x710))+((cj1*r01))+((r11*sj1)));
evalcond[1]=(((cj1*r02))+x716+(((-1.0)*sj4*x722)));
evalcond[2]=((((-1.0)*cj1*r12*x714))+x713+x723+((r02*x718)));
evalcond[3]=(((r01*x718))+((cj2*r21))+(((-1.0)*cj4*x724))+(((-1.0)*x712*x720)));
evalcond[4]=((((-1.0)*x711*x712))+((r01*x719))+(((-1.0)*x722))+(((-1.0)*r21*x714)));
evalcond[5]=((((-1.0)*r22*x714))+(((-1.0)*r12*x711))+(((-1.0)*x724))+((r02*x719)));
evalcond[6]=((-0.2295)+(((-0.031)*cj4))+(((-0.07042834)*sj4*x709))+(((-1.0)*cj1*x715))+((cj1*px))+(((-1.0)*x716*x721))+(((-1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((-0.00025)+(((-1.0)*pz*x714))+((x711*x717))+((j7*r22*sj2))+(((-1.0)*py*x711))+(((-1.0)*x715*x719))+((px*x719))+(((-0.07042834)*x710)));
evalcond[8]=((0.00025)+(((-1.0)*x713*x721))+(((-1.0)*cj1*py*x714))+(((-0.031)*sj4))+((x717*x720))+(((0.07042834)*x723))+((px*x718))+((cj2*pz))+(((-1.0)*sj1*x714*x715))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x725=((1.0)*cj1);
CheckValue<IkReal> x726=IKPowWithIntegerCheck(sj4,-1);
if(!x726.valid){
continue;
}
if( IKabs(((((-1.0)*cj2*r11*x725))+((cj2*r01*sj1))+(((-1.0)*r21*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x726.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x725)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*r11*x725))+((cj2*r01*sj1))+(((-1.0)*r21*sj2))))+IKsqr(((x726.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x725))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj2*r11*x725))+((cj2*r01*sj1))+(((-1.0)*r21*sj2))), ((x726.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x725))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x727=IKsin(j5);
IkReal x728=IKcos(j5);
IkReal x729=(cj1*cj2);
IkReal x730=((1.0)*r11);
IkReal x731=(cj2*r22);
IkReal x732=((1.0)*sj2);
IkReal x733=(j7*r02);
IkReal x734=(r12*sj1);
IkReal x735=(j7*r12);
IkReal x736=(sj1*sj2);
IkReal x737=(cj2*sj1);
IkReal x738=(cj1*sj2);
IkReal x739=((1.0)*j7);
IkReal x740=((1.0)*x727);
IkReal x741=(cj4*x727);
IkReal x742=((1.0)*x728);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj4*x728)));
evalcond[1]=((((-1.0)*sj4*x740))+((cj1*r02))+x734);
evalcond[2]=((((-1.0)*cj1*r12*x732))+((r02*x736))+x731+x741);
evalcond[3]=((((-1.0)*cj4*x742))+((r01*x736))+((cj2*r21))+(((-1.0)*x730*x738)));
evalcond[4]=(((r01*x737))+(((-1.0)*r21*x732))+(((-1.0)*x740))+(((-1.0)*x729*x730)));
evalcond[5]=((((-1.0)*r12*x729))+((r02*x737))+(((-1.0)*x742))+(((-1.0)*r22*x732)));
evalcond[6]=((-0.2295)+(((-0.031)*cj4))+(((-1.0)*cj1*x733))+(((-0.07042834)*sj4*x727))+(((-1.0)*x734*x739))+((cj1*px))+(((-1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((-0.00025)+(((-1.0)*x733*x737))+((j7*r22*sj2))+((x729*x735))+((px*x737))+(((-0.07042834)*x728))+(((-1.0)*py*x729))+(((-1.0)*pz*x732)));
evalcond[8]=((0.00025)+(((-1.0)*cj1*py*x732))+(((-1.0)*x731*x739))+((x735*x738))+(((-0.031)*sj4))+(((-1.0)*sj1*x732*x733))+((px*x736))+((cj2*pz))+(((0.07042834)*x741))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal((((cj1*r02))+((r12*sj1)))),IkReal(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
CheckValue<IkReal> x744=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x744.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x743.value)+(((1.5707963267949)*(x744.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x745=IKsin(j5);
IkReal x746=IKcos(j5);
IkReal x747=(cj1*cj2);
IkReal x748=((1.0)*r11);
IkReal x749=(cj2*r22);
IkReal x750=((1.0)*sj2);
IkReal x751=(j7*r02);
IkReal x752=(r12*sj1);
IkReal x753=(j7*r12);
IkReal x754=(sj1*sj2);
IkReal x755=(cj2*sj1);
IkReal x756=(cj1*sj2);
IkReal x757=((1.0)*j7);
IkReal x758=((1.0)*x745);
IkReal x759=(cj4*x745);
IkReal x760=((1.0)*x746);
evalcond[0]=(((sj4*x746))+((cj1*r01))+((r11*sj1)));
evalcond[1]=((((-1.0)*sj4*x758))+((cj1*r02))+x752);
evalcond[2]=(((r02*x754))+x759+x749+(((-1.0)*cj1*r12*x750)));
evalcond[3]=(((r01*x754))+((cj2*r21))+(((-1.0)*x748*x756))+(((-1.0)*cj4*x760)));
evalcond[4]=((((-1.0)*x747*x748))+((r01*x755))+(((-1.0)*r21*x750))+(((-1.0)*x758)));
evalcond[5]=(((r02*x755))+(((-1.0)*r12*x747))+(((-1.0)*x760))+(((-1.0)*r22*x750)));
evalcond[6]=((-0.2295)+(((-0.031)*cj4))+((cj1*px))+(((-1.0)*cj1*x751))+(((-1.0)*x752*x757))+(((-1.1e-7)*sj4))+((py*sj1))+(((-0.07042834)*sj4*x745)));
evalcond[7]=((-0.00025)+(((-0.07042834)*x746))+(((-1.0)*py*x747))+((x747*x753))+((j7*r22*sj2))+((px*x755))+(((-1.0)*pz*x750))+(((-1.0)*x751*x755)));
evalcond[8]=((0.00025)+(((-0.031)*sj4))+(((-1.0)*sj1*x750*x751))+((px*x754))+(((-1.0)*cj1*py*x750))+(((0.07042834)*x759))+((cj2*pz))+(((-1.0)*x749*x757))+((x753*x756))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))))+(IKabs((((cj1*r01))+((r11*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
j5eval[1]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))))+IKsqr((((cj1*r01))+((r11*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))), (((cj1*r01))+((r11*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x761=IKsin(j5);
IkReal x762=IKcos(j5);
IkReal x763=(cj1*cj2);
IkReal x764=(cj2*sj1);
IkReal x765=((1.0)*sj2);
IkReal x766=(j7*r12);
IkReal x767=((1.0)*j7*r02);
evalcond[0]=(((cj1*r02))+((r12*sj1))+x761);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x762)));
evalcond[2]=((((-1.0)*r11*x763))+(((-1.0)*r21*x765))+x761+((r01*x764)));
evalcond[3]=((((-1.0)*r12*x763))+((r02*x764))+x762+(((-1.0)*r22*x765)));
evalcond[4]=((-0.07349989)+(((-1.0)*sj1*x766))+(((-1.0)*cj1*x767))+((cj1*px))+(((0.07042834)*x761))+((py*sj1)));
evalcond[5]=((0.00025)+((px*x764))+((j7*r22*sj2))+(((-1.0)*x764*x767))+((x763*x766))+(((-1.0)*py*x763))+(((0.07042834)*x762))+(((-1.0)*pz*x765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((r12*sj1))))+IKsqr(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r02))+((r12*sj1))), ((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x768=IKsin(j5);
IkReal x769=IKcos(j5);
IkReal x770=(cj1*cj2);
IkReal x771=(r12*sj1);
IkReal x772=((1.0)*sj2);
IkReal x773=((1.0)*j7);
IkReal x774=(cj1*r02);
IkReal x775=(cj2*sj1);
IkReal x776=(r02*x775);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x769);
evalcond[1]=((((-1.0)*x768))+x771+x774);
evalcond[2]=(((r01*x775))+x768+(((-1.0)*r11*x770))+(((-1.0)*r21*x772)));
evalcond[3]=((((-1.0)*r12*x770))+(((-1.0)*r22*x772))+x776+x769);
evalcond[4]=((-0.07350011)+((cj1*px))+(((-1.0)*x771*x773))+(((-0.07042834)*x768))+(((-1.0)*x773*x774))+((py*sj1)));
evalcond[5]=((0.00025)+(((-1.0)*py*x770))+((j7*r12*x770))+((j7*r22*sj2))+((px*x775))+(((-1.0)*pz*x772))+(((0.07042834)*x769))+(((-1.0)*x773*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x777=((1.0)*cj1);
CheckValue<IkReal> x778=IKPowWithIntegerCheck(sj4,-1);
if(!x778.valid){
continue;
}
CheckValue<IkReal> x779=IKPowWithIntegerCheck(cj4,-1);
if(!x779.valid){
continue;
}
if( IKabs(((x778.value)*(((((-1.0)*r02*x777))+(((-1.0)*r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x779.value)*(((((-1.0)*r11*sj2*x777))+((cj2*r21))+((r01*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x778.value)*(((((-1.0)*r02*x777))+(((-1.0)*r12*sj1))))))+IKsqr(((x779.value)*(((((-1.0)*r11*sj2*x777))+((cj2*r21))+((r01*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x778.value)*(((((-1.0)*r02*x777))+(((-1.0)*r12*sj1))))), ((x779.value)*(((((-1.0)*r11*sj2*x777))+((cj2*r21))+((r01*sj1*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x780=IKsin(j5);
IkReal x781=IKcos(j5);
IkReal x782=((1.0)*cj2);
IkReal x783=(cj1*r11);
IkReal x784=((1.0)*sj2);
IkReal x785=(j7*r02);
IkReal x786=(r12*sj1);
IkReal x787=(j7*r22);
IkReal x788=(cj1*r12);
IkReal x789=(sj1*sj2);
IkReal x790=(cj2*sj1);
IkReal x791=(cj1*py);
IkReal x792=(sj4*x780);
IkReal x793=(cj4*x780);
IkReal x794=((1.0)*x781);
evalcond[0]=(((cj1*r02))+x792+x786);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*sj4*x794)));
evalcond[2]=(((r01*x790))+(((-1.0)*r21*x784))+(((-1.0)*x782*x783))+x780);
evalcond[3]=(((r02*x790))+(((-1.0)*x782*x788))+(((-1.0)*r22*x784))+x781);
evalcond[4]=(((r02*x789))+((cj2*r22))+(((-1.0)*x784*x788))+x793);
evalcond[5]=(((r01*x789))+((cj2*r21))+(((-1.0)*cj4*x794))+(((-1.0)*x783*x784)));
evalcond[6]=((-0.0735)+(((0.031)*cj4))+((cj1*px))+(((1.1e-7)*sj4))+(((-1.0)*j7*x786))+(((-1.0)*cj1*x785))+((py*sj1))+(((0.07042834)*x792)));
evalcond[7]=((0.00025)+((sj2*x787))+((cj2*j7*x788))+((px*x790))+(((-1.0)*sj1*x782*x785))+(((-1.0)*x782*x791))+(((-1.0)*pz*x784))+(((0.07042834)*x781)));
evalcond[8]=((0.00025)+(((-0.031)*sj4))+((px*x789))+((j7*sj2*x788))+(((-1.0)*x784*x791))+(((-1.0)*x782*x787))+((cj2*pz))+(((-1.0)*sj1*x784*x785))+(((1.1e-7)*cj4))+(((0.07042834)*x793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x795=IKPowWithIntegerCheck(sj4,-1);
if(!x795.valid){
continue;
}
if( IKabs((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x795.value)*((((cj1*r01))+((r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11))))+IKsqr(((x795.value)*((((cj1*r01))+((r11*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11))), ((x795.value)*((((cj1*r01))+((r11*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x796=IKsin(j5);
IkReal x797=IKcos(j5);
IkReal x798=((1.0)*cj2);
IkReal x799=(cj1*r11);
IkReal x800=((1.0)*sj2);
IkReal x801=(j7*r02);
IkReal x802=(r12*sj1);
IkReal x803=(j7*r22);
IkReal x804=(cj1*r12);
IkReal x805=(sj1*sj2);
IkReal x806=(cj2*sj1);
IkReal x807=(cj1*py);
IkReal x808=(sj4*x796);
IkReal x809=(cj4*x796);
IkReal x810=((1.0)*x797);
evalcond[0]=(((cj1*r02))+x808+x802);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*sj4*x810)));
evalcond[2]=((((-1.0)*x798*x799))+(((-1.0)*r21*x800))+((r01*x806))+x796);
evalcond[3]=((((-1.0)*x798*x804))+(((-1.0)*r22*x800))+((r02*x806))+x797);
evalcond[4]=((((-1.0)*x800*x804))+((r02*x805))+((cj2*r22))+x809);
evalcond[5]=((((-1.0)*x799*x800))+((cj2*r21))+(((-1.0)*cj4*x810))+((r01*x805)));
evalcond[6]=((-0.0735)+(((-1.0)*j7*x802))+(((0.031)*cj4))+((cj1*px))+(((1.1e-7)*sj4))+((py*sj1))+(((-1.0)*cj1*x801))+(((0.07042834)*x808)));
evalcond[7]=((0.00025)+(((-1.0)*sj1*x798*x801))+((sj2*x803))+(((-1.0)*x798*x807))+((cj2*j7*x804))+((px*x806))+(((0.07042834)*x797))+(((-1.0)*pz*x800)));
evalcond[8]=((0.00025)+(((-1.0)*sj1*x800*x801))+(((-1.0)*x798*x803))+(((-0.031)*sj4))+(((-1.0)*x800*x807))+((j7*sj2*x804))+((px*x805))+((cj2*pz))+(((0.07042834)*x809))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x811=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x811.valid){
continue;
}
CheckValue<IkReal> x812 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))),IkReal((((cj1*r01))+((r11*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x812.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x811.value)))+(x812.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x813=IKsin(j5);
IkReal x814=IKcos(j5);
IkReal x815=((1.0)*cj2);
IkReal x816=(cj1*r11);
IkReal x817=((1.0)*sj2);
IkReal x818=(j7*r02);
IkReal x819=(r12*sj1);
IkReal x820=(j7*r22);
IkReal x821=(cj1*r12);
IkReal x822=(sj1*sj2);
IkReal x823=(cj2*sj1);
IkReal x824=(cj1*py);
IkReal x825=(sj4*x813);
IkReal x826=(cj4*x813);
IkReal x827=((1.0)*x814);
evalcond[0]=(((cj1*r02))+x819+x825);
evalcond[1]=(((cj1*r01))+(((-1.0)*sj4*x827))+((r11*sj1)));
evalcond[2]=((((-1.0)*x815*x816))+((r01*x823))+x813+(((-1.0)*r21*x817)));
evalcond[3]=((((-1.0)*x815*x821))+(((-1.0)*r22*x817))+x814+((r02*x823)));
evalcond[4]=((((-1.0)*x817*x821))+((cj2*r22))+x826+((r02*x822)));
evalcond[5]=((((-1.0)*x816*x817))+((r01*x822))+(((-1.0)*cj4*x827))+((cj2*r21)));
evalcond[6]=((-0.0735)+(((-1.0)*cj1*x818))+(((0.031)*cj4))+(((0.07042834)*x825))+((cj1*px))+(((1.1e-7)*sj4))+(((-1.0)*j7*x819))+((py*sj1)));
evalcond[7]=((0.00025)+(((-1.0)*sj1*x815*x818))+((px*x823))+(((-1.0)*x815*x824))+(((-1.0)*pz*x817))+(((0.07042834)*x814))+((sj2*x820))+((cj2*j7*x821)));
evalcond[8]=((0.00025)+(((-1.0)*sj1*x817*x818))+(((-0.031)*sj4))+((px*x822))+(((-1.0)*x815*x820))+(((-1.0)*x817*x824))+((j7*sj2*x821))+(((0.07042834)*x826))+((cj2*pz))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x833=IKPowWithIntegerCheck(cj4,-1);
if(!x833.valid){
continue;
}
IkReal x828=x833.value;
IkReal x829=((1.0)*cj1);
IkReal x830=(r12*sj2);
IkReal x831=(cj2*r22);
IkReal x832=(r02*sj1*sj2);
CheckValue<IkReal> x834=IKPowWithIntegerCheck(cj3,-1);
if(!x834.valid){
continue;
}
CheckValue<IkReal> x835=IKPowWithIntegerCheck(sj4,-1);
if(!x835.valid){
continue;
}
if( IKabs((x828*(((((-1.0)*x831))+(((-1.0)*x832))+((cj1*x830)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x828*(x834.value)*(x835.value)*(((((-1.0)*sj3*x829*x830))+(((-1.0)*cj4*r11*sj1))+(((-1.0)*cj4*r01*x829))+((sj3*x832))+((sj3*x831)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x828*(((((-1.0)*x831))+(((-1.0)*x832))+((cj1*x830))))))+IKsqr((x828*(x834.value)*(x835.value)*(((((-1.0)*sj3*x829*x830))+(((-1.0)*cj4*r11*sj1))+(((-1.0)*cj4*r01*x829))+((sj3*x832))+((sj3*x831))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x828*(((((-1.0)*x831))+(((-1.0)*x832))+((cj1*x830))))), (x828*(x834.value)*(x835.value)*(((((-1.0)*sj3*x829*x830))+(((-1.0)*cj4*r11*sj1))+(((-1.0)*cj4*r01*x829))+((sj3*x832))+((sj3*x831))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x836=IKsin(j5);
IkReal x837=IKcos(j5);
IkReal x838=((1.0)*cj2);
IkReal x839=(cj1*r11);
IkReal x840=(r12*sj1);
IkReal x841=(j7*r22);
IkReal x842=((1.0)*sj2);
IkReal x843=(sj3*sj4);
IkReal x844=(cj1*j7);
IkReal x845=(r02*sj1);
IkReal x846=(r01*sj1);
IkReal x847=(cj1*r12);
IkReal x848=(px*sj1);
IkReal x849=(cj3*sj4);
IkReal x850=(cj1*py);
IkReal x851=((0.031)*cj4);
IkReal x852=(cj3*x837);
IkReal x853=((1.0)*x836);
IkReal x854=(sj3*x837);
IkReal x855=((0.07042834)*x836);
evalcond[0]=(((cj1*r01))+((x837*x849))+((r11*sj1))+((sj3*x836)));
evalcond[1]=((((-1.0)*x842*x847))+((cj4*x836))+((cj2*r22))+((sj2*x845)));
evalcond[2]=((((-1.0)*x849*x853))+((cj1*r02))+x854+x840);
evalcond[3]=((((-1.0)*cj4*x837))+((cj2*r21))+(((-1.0)*x839*x842))+((sj2*x846)));
evalcond[4]=((((-1.0)*r21*x842))+(((-1.0)*cj3*x853))+((x837*x843))+(((-1.0)*x838*x839))+((cj2*x846)));
evalcond[5]=((((-1.0)*x852))+(((-1.0)*r22*x842))+(((-1.0)*x838*x847))+((cj2*x845))+(((-1.0)*x843*x853)));
evalcond[6]=((0.00025)+((r12*sj2*x844))+(((-1.0)*x842*x850))+(((-0.031)*sj4))+((cj2*pz))+(((-1.0)*j7*x842*x845))+(((-1.0)*x838*x841))+((sj2*x848))+((cj4*x855))+(((1.1e-7)*cj4)));
evalcond[7]=((-0.1515)+(((0.07042834)*x854))+(((-1.0)*x849*x855))+(((-1.0)*j7*x840))+(((-1.0)*r02*x844))+(((-1.0)*cj3*x851))+((cj1*px))+(((-1.1e-7)*x849))+(((-0.078)*cj3))+(((0.00025)*sj3))+((py*sj1)));
evalcond[8]=((((-0.00025)*cj3))+(((-1.0)*pz*x842))+(((-1.0)*x838*x850))+(((-0.078)*sj3))+(((-1.0)*sj3*x851))+(((-1.1e-7)*x843))+(((-0.07042834)*x852))+(((-1.0)*j7*x838*x845))+((sj2*x841))+((cj2*x848))+(((-1.0)*x843*x855))+((cj2*r12*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x862=IKPowWithIntegerCheck(cj4,-1);
if(!x862.valid){
continue;
}
IkReal x856=x862.value;
IkReal x857=(cj2*r21);
IkReal x858=(cj3*sj4);
IkReal x859=((1.0)*r01);
IkReal x860=(sj1*sj2);
IkReal x861=(cj1*r11*sj2);
CheckValue<IkReal> x863=IKPowWithIntegerCheck(sj3,-1);
if(!x863.valid){
continue;
}
if( IKabs((x856*(x863.value)*(((((-1.0)*x857*x858))+(((-1.0)*x858*x859*x860))+(((-1.0)*cj4*r11*sj1))+((x858*x861))+(((-1.0)*cj1*cj4*x859)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x856*((((r01*x860))+(((-1.0)*x861))+x857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x856*(x863.value)*(((((-1.0)*x857*x858))+(((-1.0)*x858*x859*x860))+(((-1.0)*cj4*r11*sj1))+((x858*x861))+(((-1.0)*cj1*cj4*x859))))))+IKsqr((x856*((((r01*x860))+(((-1.0)*x861))+x857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x856*(x863.value)*(((((-1.0)*x857*x858))+(((-1.0)*x858*x859*x860))+(((-1.0)*cj4*r11*sj1))+((x858*x861))+(((-1.0)*cj1*cj4*x859))))), (x856*((((r01*x860))+(((-1.0)*x861))+x857))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x864=IKsin(j5);
IkReal x865=IKcos(j5);
IkReal x866=((1.0)*cj2);
IkReal x867=(cj1*r11);
IkReal x868=(r12*sj1);
IkReal x869=(j7*r22);
IkReal x870=((1.0)*sj2);
IkReal x871=(sj3*sj4);
IkReal x872=(cj1*j7);
IkReal x873=(r02*sj1);
IkReal x874=(r01*sj1);
IkReal x875=(cj1*r12);
IkReal x876=(px*sj1);
IkReal x877=(cj3*sj4);
IkReal x878=(cj1*py);
IkReal x879=((0.031)*cj4);
IkReal x880=(cj3*x865);
IkReal x881=((1.0)*x864);
IkReal x882=(sj3*x865);
IkReal x883=((0.07042834)*x864);
evalcond[0]=(((sj3*x864))+((cj1*r01))+((r11*sj1))+((x865*x877)));
evalcond[1]=(((sj2*x873))+((cj2*r22))+(((-1.0)*x870*x875))+((cj4*x864)));
evalcond[2]=(((cj1*r02))+(((-1.0)*x877*x881))+x868+x882);
evalcond[3]=(((sj2*x874))+((cj2*r21))+(((-1.0)*x867*x870))+(((-1.0)*cj4*x865)));
evalcond[4]=((((-1.0)*cj3*x881))+((cj2*x874))+(((-1.0)*x866*x867))+(((-1.0)*r21*x870))+((x865*x871)));
evalcond[5]=(((cj2*x873))+(((-1.0)*x866*x875))+(((-1.0)*x880))+(((-1.0)*x871*x881))+(((-1.0)*r22*x870)));
evalcond[6]=((0.00025)+((sj2*x876))+(((-1.0)*j7*x870*x873))+(((-1.0)*x866*x869))+(((-0.031)*sj4))+((cj4*x883))+(((-1.0)*x870*x878))+((cj2*pz))+((r12*sj2*x872))+(((1.1e-7)*cj4)));
evalcond[7]=((-0.1515)+(((-1.0)*j7*x868))+(((-1.1e-7)*x877))+(((-1.0)*cj3*x879))+(((0.07042834)*x882))+((cj1*px))+(((-1.0)*x877*x883))+(((-1.0)*r02*x872))+(((-0.078)*cj3))+(((0.00025)*sj3))+((py*sj1)));
evalcond[8]=(((cj2*x876))+(((-0.00025)*cj3))+((sj2*x869))+(((-1.0)*x866*x878))+(((-1.1e-7)*x871))+((cj2*r12*x872))+(((-1.0)*sj3*x879))+(((-0.078)*sj3))+(((-1.0)*pz*x870))+(((-1.0)*x871*x883))+(((-1.0)*j7*x866*x873))+(((-0.07042834)*x880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x884=(cj3*sj4);
IkReal x885=(cj1*r02);
IkReal x886=((1.0)*sj1);
IkReal x887=((1.0)*cj1*r01);
CheckValue<IkReal> x888=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj3*cj3)*(cj4*cj4))))),-1);
if(!x888.valid){
continue;
}
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj3*x886))+((r12*sj1*x884))+(((-1.0)*sj3*x887))+((x884*x885)))),IkReal(((((-1.0)*sj3*x885))+(((-1.0)*r11*x884*x886))+(((-1.0)*r12*sj3*x886))+(((-1.0)*x884*x887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x888.value)))+(x889.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x890=IKsin(j5);
IkReal x891=IKcos(j5);
IkReal x892=((1.0)*cj2);
IkReal x893=(cj1*r11);
IkReal x894=(r12*sj1);
IkReal x895=(j7*r22);
IkReal x896=((1.0)*sj2);
IkReal x897=(sj3*sj4);
IkReal x898=(cj1*j7);
IkReal x899=(r02*sj1);
IkReal x900=(r01*sj1);
IkReal x901=(cj1*r12);
IkReal x902=(px*sj1);
IkReal x903=(cj3*sj4);
IkReal x904=(cj1*py);
IkReal x905=((0.031)*cj4);
IkReal x906=(cj3*x891);
IkReal x907=((1.0)*x890);
IkReal x908=(sj3*x891);
IkReal x909=((0.07042834)*x890);
evalcond[0]=(((x891*x903))+((cj1*r01))+((r11*sj1))+((sj3*x890)));
evalcond[1]=((((-1.0)*x896*x901))+((sj2*x899))+((cj4*x890))+((cj2*r22)));
evalcond[2]=((((-1.0)*x903*x907))+((cj1*r02))+x894+x908);
evalcond[3]=(((sj2*x900))+(((-1.0)*cj4*x891))+((cj2*r21))+(((-1.0)*x893*x896)));
evalcond[4]=((((-1.0)*x892*x893))+((cj2*x900))+((x891*x897))+(((-1.0)*cj3*x907))+(((-1.0)*r21*x896)));
evalcond[5]=(((cj2*x899))+(((-1.0)*x897*x907))+(((-1.0)*x892*x901))+(((-1.0)*x906))+(((-1.0)*r22*x896)));
evalcond[6]=((0.00025)+(((-1.0)*x892*x895))+(((-1.0)*x896*x904))+((sj2*x902))+(((-1.0)*j7*x896*x899))+(((-0.031)*sj4))+((cj4*x909))+((cj2*pz))+((r12*sj2*x898))+(((1.1e-7)*cj4)));
evalcond[7]=((-0.1515)+(((-1.0)*x903*x909))+(((-1.0)*r02*x898))+(((-1.1e-7)*x903))+(((0.07042834)*x908))+((cj1*px))+(((-1.0)*j7*x894))+(((-0.078)*cj3))+(((0.00025)*sj3))+((py*sj1))+(((-1.0)*cj3*x905)));
evalcond[8]=(((cj2*r12*x898))+(((-0.00025)*cj3))+(((-1.0)*j7*x892*x899))+(((-1.0)*x897*x909))+((cj2*x902))+(((-1.0)*sj3*x905))+(((-1.0)*pz*x896))+(((-0.078)*sj3))+((sj2*x895))+(((-1.0)*x892*x904))+(((-1.1e-7)*x897))+(((-0.07042834)*x906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(cj3,-1);
if(!x910.valid){
continue;
}
if( IKabs(((((-1.0)*cj1*r10*sj2))+((cj2*r20))+((r00*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x910.value)*((((r10*sj1))+((cj1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r10*sj2))+((cj2*r20))+((r00*sj1*sj2))))+IKsqr(((x910.value)*((((r10*sj1))+((cj1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj1*r10*sj2))+((cj2*r20))+((r00*sj1*sj2))), ((x910.value)*((((r10*sj1))+((cj1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x911=IKcos(j4);
IkReal x912=(r00*sj1);
IkReal x913=((1.0)*cj1*r10);
IkReal x914=((1.0)*x911);
evalcond[0]=((((-1.0)*cj3*x914))+((r10*sj1))+((cj1*r00)));
evalcond[1]=((((-1.0)*(IKsin(j4))))+((sj2*x912))+((cj2*r20))+(((-1.0)*sj2*x913)));
evalcond[2]=(((cj2*x912))+(((-1.0)*sj3*x914))+(((-1.0)*r20*sj2))+(((-1.0)*cj2*x913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x915=(cj3*sj4);
IkReal x916=(cj1*r02);
IkReal x917=((1.0)*sj1);
IkReal x918=((1.0)*cj1*r01);
IkReal x919=((1.0)+(((-1.0)*(cj3*cj3)*(cj4*cj4))));
j5eval[0]=x919;
j5eval[1]=((IKabs(((((-1.0)*sj3*x916))+(((-1.0)*r11*x915*x917))+(((-1.0)*r12*sj3*x917))+(((-1.0)*x915*x918)))))+(IKabs((((r12*sj1*x915))+(((-1.0)*sj3*x918))+(((-1.0)*r11*sj3*x917))+((x915*x916))))));
j5eval[2]=IKsign(x919);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
j5eval[0]=cj4;
j5eval[1]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
j5eval[0]=cj4;
j5eval[1]=cj3;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x920=(cj1*cj3);
IkReal x921=((1.0)*sj3);
IkReal x922=(r12*sj1);
IkReal x923=(r11*sj1);
if( IKabs((((cj3*x922))+(((-1.0)*x921*x923))+(((-1.0)*cj1*r01*x921))+((r02*x920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r02*x921))+(((-1.0)*cj3*x923))+(((-1.0)*x921*x922))+(((-1.0)*r01*x920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*x922))+(((-1.0)*x921*x923))+(((-1.0)*cj1*r01*x921))+((r02*x920))))+IKsqr(((((-1.0)*cj1*r02*x921))+(((-1.0)*cj3*x923))+(((-1.0)*x921*x922))+(((-1.0)*r01*x920))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*x922))+(((-1.0)*x921*x923))+(((-1.0)*cj1*r01*x921))+((r02*x920))), ((((-1.0)*cj1*r02*x921))+(((-1.0)*cj3*x923))+(((-1.0)*x921*x922))+(((-1.0)*r01*x920))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x924=IKcos(j5);
IkReal x925=IKsin(j5);
IkReal x926=(cj1*cj2);
IkReal x927=(r12*sj1);
IkReal x928=((1.0)*sj2);
IkReal x929=((1.0)*cj3);
IkReal x930=(cj2*sj1);
IkReal x931=(sj3*x924);
IkReal x932=((0.07042834)*x924);
IkReal x933=(sj3*x925);
IkReal x934=((1.0)*j7*r02);
IkReal x935=(x925*x929);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((cj3*x924))+x933);
evalcond[1]=(((cj1*r02))+x931+x927+(((-1.0)*x935)));
evalcond[2]=((((-1.0)*r21*x928))+(((-1.0)*r11*x926))+((r01*x930))+x931+(((-1.0)*x935)));
evalcond[3]=((((-1.0)*r22*x928))+(((-1.0)*x924*x929))+(((-1.0)*x933))+(((-1.0)*r12*x926))+((r02*x930)));
evalcond[4]=((-0.1515)+(((-0.07800011)*cj3))+(((-1.0)*j7*x927))+(((-0.07042834)*cj3*x925))+((cj1*px))+(((-1.0)*cj1*x934))+(((0.00025)*sj3))+((py*sj1))+(((0.07042834)*x931)));
evalcond[5]=((((-1.0)*x930*x934))+(((-0.00025)*cj3))+(((-0.07800011)*sj3))+(((-1.0)*cj3*x932))+((j7*r22*sj2))+(((-0.07042834)*x933))+(((-1.0)*pz*x928))+(((-1.0)*py*x926))+((px*x930))+((j7*r12*x926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x936=((1.0)*cj1);
IkReal x937=(r11*sj1);
IkReal x938=((1.0)*r12*sj1);
if( IKabs(((((-1.0)*cj3*r02*x936))+(((-1.0)*cj3*x938))+(((-1.0)*r01*sj3*x936))+(((-1.0)*sj3*x937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*sj3*x936))+(((-1.0)*sj3*x938))+((cj3*x937))+((cj1*cj3*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*r02*x936))+(((-1.0)*cj3*x938))+(((-1.0)*r01*sj3*x936))+(((-1.0)*sj3*x937))))+IKsqr(((((-1.0)*r02*sj3*x936))+(((-1.0)*sj3*x938))+((cj3*x937))+((cj1*cj3*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj3*r02*x936))+(((-1.0)*cj3*x938))+(((-1.0)*r01*sj3*x936))+(((-1.0)*sj3*x937))), ((((-1.0)*r02*sj3*x936))+(((-1.0)*sj3*x938))+((cj3*x937))+((cj1*cj3*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x939=IKsin(j5);
IkReal x940=IKcos(j5);
IkReal x941=(cj1*cj2);
IkReal x942=(r12*sj1);
IkReal x943=((1.0)*sj2);
IkReal x944=((1.0)*cj3);
IkReal x945=((1.0)*j7);
IkReal x946=(cj1*r02);
IkReal x947=(cj2*sj1);
IkReal x948=(sj3*x939);
IkReal x949=((0.07042834)*x940);
IkReal x950=(cj3*x939);
IkReal x951=(sj3*x940);
IkReal x952=(x940*x944);
evalcond[0]=(x951+x950+x942+x946);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x952))+x948);
evalcond[2]=(((r02*x947))+(((-1.0)*r12*x941))+(((-1.0)*r22*x943))+(((-1.0)*x952))+x948);
evalcond[3]=((((-1.0)*r21*x943))+(((-1.0)*x939*x944))+(((-1.0)*x951))+(((-1.0)*r11*x941))+((r01*x947)));
evalcond[4]=((-0.1515)+(((-0.07799989)*cj3))+((sj3*x949))+(((-1.0)*x945*x946))+(((-1.0)*x942*x945))+((cj1*px))+(((0.07042834)*x950))+(((0.00025)*sj3))+((py*sj1)));
evalcond[5]=((((-1.0)*pz*x943))+(((-0.00025)*cj3))+(((-1.0)*r02*x945*x947))+(((-1.0)*cj3*x949))+((j7*r12*x941))+((j7*r22*sj2))+(((0.07042834)*x948))+((px*x947))+(((-1.0)*py*x941))+(((-0.07799989)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x953=((1.0)*cj1);
IkReal x954=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x953))+(((-1.0)*r11*x954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x954))+(((-1.0)*r02*x953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x953))+(((-1.0)*r11*x954))))+IKsqr(((((-1.0)*r12*x954))+(((-1.0)*r02*x953))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x953))+(((-1.0)*r11*x954))), ((((-1.0)*r12*x954))+(((-1.0)*r02*x953))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x955=IKsin(j5);
IkReal x956=IKcos(j5);
IkReal x957=(cj1*cj2);
IkReal x958=((1.0)*r11);
IkReal x959=(cj2*r22);
IkReal x960=((1.0)*sj2);
IkReal x961=(j7*r02);
IkReal x962=(r12*sj1);
IkReal x963=(j7*r12);
IkReal x964=(sj1*sj2);
IkReal x965=(cj2*sj1);
IkReal x966=(cj1*sj2);
IkReal x967=((1.0)*j7);
IkReal x968=(cj4*x955);
IkReal x969=(sj4*x955);
evalcond[0]=(((cj1*r01))+((r11*sj1))+x955);
evalcond[1]=(((cj1*r02))+x962+x956);
evalcond[2]=((((-1.0)*cj1*r12*x960))+((r02*x964))+x968+x959);
evalcond[3]=(((r01*x964))+(((-1.0)*cj4*x956))+(((-1.0)*x958*x966))+((cj2*r21)));
evalcond[4]=((((-1.0)*r21*x960))+((sj4*x956))+((r01*x965))+(((-1.0)*x957*x958)));
evalcond[5]=((((-1.0)*x969))+(((-1.0)*r12*x957))+((r02*x965))+(((-1.0)*r22*x960)));
evalcond[6]=((-0.15125)+(((-1.0)*x962*x967))+(((-1.0)*cj1*x961))+((cj1*px))+(((0.07042834)*x956))+((py*sj1)));
evalcond[7]=((0.00025)+((px*x964))+(((-1.0)*sj1*x960*x961))+(((-0.031)*sj4))+(((0.07042834)*x968))+(((-1.0)*x959*x967))+((x963*x966))+((cj2*pz))+(((-1.0)*cj1*py*x960))+(((1.1e-7)*cj4)));
evalcond[8]=((-0.078)+((px*x965))+(((-1.0)*pz*x960))+(((-0.031)*cj4))+(((-1.0)*x961*x965))+((j7*r22*sj2))+(((-0.07042834)*x969))+((x957*x963))+(((-1.1e-7)*sj4))+(((-1.0)*py*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01))+((r11*sj1))))+IKsqr((((cj1*r02))+((r12*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r01))+((r11*sj1))), (((cj1*r02))+((r12*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x970=IKsin(j5);
IkReal x971=IKcos(j5);
IkReal x972=((1.0)*cj2);
IkReal x973=(cj1*r11);
IkReal x974=((1.0)*sj2);
IkReal x975=(j7*r02);
IkReal x976=(r12*sj1);
IkReal x977=(j7*r22);
IkReal x978=(cj1*r12);
IkReal x979=(sj1*sj2);
IkReal x980=(cj1*py);
IkReal x981=(cj2*sj1);
IkReal x982=(sj4*x970);
IkReal x983=(cj4*x970);
IkReal x984=((1.0)*x971);
evalcond[0]=((((-1.0)*x970))+((cj1*r01))+((r11*sj1)));
evalcond[1]=((((-1.0)*x984))+((cj1*r02))+x976);
evalcond[2]=((((-1.0)*x974*x978))+((cj2*r22))+((r02*x979))+x983);
evalcond[3]=(((r01*x979))+((cj2*r21))+(((-1.0)*cj4*x984))+(((-1.0)*x973*x974)));
evalcond[4]=((((-1.0)*x972*x978))+x982+(((-1.0)*r22*x974))+((r02*x981)));
evalcond[5]=((((-1.0)*sj4*x984))+((r01*x981))+(((-1.0)*x972*x973))+(((-1.0)*r21*x974)));
evalcond[6]=((-0.15175)+(((-1.0)*j7*x976))+(((-1.0)*cj1*x975))+(((-0.07042834)*x971))+((cj1*px))+((py*sj1)));
evalcond[7]=((0.00025)+((j7*sj2*x978))+(((-0.031)*sj4))+(((0.07042834)*x983))+(((-1.0)*x974*x980))+((cj2*pz))+(((-1.0)*x972*x977))+(((-1.0)*sj1*x974*x975))+((px*x979))+(((1.1e-7)*cj4)));
evalcond[8]=((0.078)+((cj2*j7*x978))+(((-1.0)*pz*x974))+(((0.031)*cj4))+(((0.07042834)*x982))+(((-1.0)*sj1*x972*x975))+(((1.1e-7)*sj4))+(((-1.0)*x972*x980))+((sj2*x977))+((px*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x985=((1.0)*cj1);
IkReal x986=((1.0)*sj1);
j5eval[0]=sj3;
j5eval[1]=((IKabs(((((-1.0)*r12*x986))+(((-1.0)*r02*x985)))))+(IKabs(((((-1.0)*r01*x985))+(((-1.0)*r11*x986))))));
j5eval[2]=IKsign(sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=sj3;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x987=((1.0)*sj2);
if( IKabs((((cj1*r12*sj2))+(((-1.0)*cj2*r22))+(((-1.0)*r02*sj1*x987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*r11*x987))+((cj2*r21))+((r01*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r12*sj2))+(((-1.0)*cj2*r22))+(((-1.0)*r02*sj1*x987))))+IKsqr(((((-1.0)*cj1*r11*x987))+((cj2*r21))+((r01*sj1*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r12*sj2))+(((-1.0)*cj2*r22))+(((-1.0)*r02*sj1*x987))), ((((-1.0)*cj1*r11*x987))+((cj2*r21))+((r01*sj1*sj2))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x988=IKsin(j5);
IkReal x989=IKcos(j5);
IkReal x990=((1.0)*cj2);
IkReal x991=(cj1*r11);
IkReal x992=((1.0)*sj2);
IkReal x993=(r02*sj1);
IkReal x994=(cj2*sj1);
IkReal x995=(j7*r22);
IkReal x996=(cj1*r12);
IkReal x997=(sj1*sj2);
IkReal x998=(cj1*py);
IkReal x999=((1.0)*x989);
evalcond[0]=((((-1.0)*x992*x996))+((sj2*x993))+((cj2*r22))+x988);
evalcond[1]=((((-1.0)*x991*x992))+((r01*x997))+(((-1.0)*x999))+((cj2*r21)));
evalcond[2]=((((-1.0)*x988))+((r01*x994))+(((-1.0)*x990*x991))+(((-1.0)*r21*x992)));
evalcond[3]=((((-1.0)*r22*x992))+(((-1.0)*x990*x996))+(((-1.0)*x999))+((cj2*x993)));
evalcond[4]=((0.00025011)+((j7*sj2*x996))+(((-1.0)*x992*x998))+(((0.07042834)*x988))+((px*x997))+(((-1.0)*x990*x995))+((cj2*pz))+(((-1.0)*j7*x992*x993)));
evalcond[5]=((-0.00025)+(((-1.0)*j7*x990*x993))+((px*x994))+(((-1.0)*x990*x998))+(((-1.0)*pz*x992))+((sj2*x995))+(((-0.07042834)*x989))+((cj2*j7*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1000=(cj1*r12);
IkReal x1001=((1.0)*r02*sj1);
if( IKabs(((((-1.0)*cj2*r22))+((sj2*x1000))+(((-1.0)*sj2*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x1000))+((r22*sj2))+(((-1.0)*cj2*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj2*r22))+((sj2*x1000))+(((-1.0)*sj2*x1001))))+IKsqr((((cj2*x1000))+((r22*sj2))+(((-1.0)*cj2*x1001))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj2*r22))+((sj2*x1000))+(((-1.0)*sj2*x1001))), (((cj2*x1000))+((r22*sj2))+(((-1.0)*cj2*x1001))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1002=IKsin(j5);
IkReal x1003=IKcos(j5);
IkReal x1004=((1.0)*cj2);
IkReal x1005=(cj1*r11);
IkReal x1006=((1.0)*sj2);
IkReal x1007=(r02*sj1);
IkReal x1008=(cj2*sj1);
IkReal x1009=(j7*r22);
IkReal x1010=(cj1*r12);
IkReal x1011=(sj1*sj2);
IkReal x1012=(cj1*py);
evalcond[0]=(x1002+(((-1.0)*x1006*x1010))+((sj2*x1007))+((cj2*r22)));
evalcond[1]=(((r01*x1008))+x1002+(((-1.0)*r21*x1006))+(((-1.0)*x1004*x1005)));
evalcond[2]=(((cj2*x1007))+x1003+(((-1.0)*x1004*x1010))+(((-1.0)*r22*x1006)));
evalcond[3]=((((-1.0)*x1003))+(((-1.0)*x1005*x1006))+((cj2*r21))+((r01*x1011)));
evalcond[4]=((0.00025011)+(((-1.0)*j7*x1006*x1007))+(((-1.0)*x1006*x1012))+(((-1.0)*x1004*x1009))+((j7*sj2*x1010))+((cj2*pz))+(((0.07042834)*x1002))+((px*x1011)));
evalcond[5]=((0.00025)+((px*x1008))+(((-1.0)*pz*x1006))+(((-1.0)*j7*x1004*x1007))+(((-1.0)*x1004*x1012))+((sj2*x1009))+((cj2*j7*x1010))+(((0.07042834)*x1003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1013=((1.0)*cj1);
IkReal x1014=((1.0)*sj1);
if( IKabs(((((-1.0)*r01*x1013))+(((-1.0)*r11*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x1013))+(((-1.0)*r12*x1014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1013))+(((-1.0)*r11*x1014))))+IKsqr(((((-1.0)*r02*x1013))+(((-1.0)*r12*x1014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r01*x1013))+(((-1.0)*r11*x1014))), ((((-1.0)*r02*x1013))+(((-1.0)*r12*x1014))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1015=IKsin(j5);
IkReal x1016=IKcos(j5);
IkReal x1017=(cj2*r22);
IkReal x1018=((1.0)*j7);
IkReal x1019=(r12*sj1);
IkReal x1020=(cj1*r02);
IkReal x1021=(sj1*sj2);
IkReal x1022=(r02*x1021);
IkReal x1023=((1.0)*cj1*sj2);
evalcond[0]=(x1015+((cj1*r01))+((r11*sj1)));
evalcond[1]=(x1019+x1016+x1020);
evalcond[2]=((((-1.0)*r12*x1023))+x1015+x1017+x1022);
evalcond[3]=(((r01*x1021))+(((-1.0)*r11*x1023))+((cj2*r21))+(((-1.0)*x1016)));
evalcond[4]=((-0.15125)+(((-1.0)*x1018*x1019))+(((-1.0)*x1018*x1020))+((cj1*px))+((py*sj1))+(((0.07042834)*x1016)));
evalcond[5]=((0.00025011)+(((-1.0)*x1017*x1018))+(((-1.0)*py*x1023))+(((-1.0)*x1018*x1022))+((cj1*j7*r12*sj2))+((px*x1021))+((cj2*pz))+(((0.07042834)*x1015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01))+((r11*sj1))))+IKsqr((((cj1*r02))+((r12*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r01))+((r11*sj1))), (((cj1*r02))+((r12*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1024=IKsin(j5);
IkReal x1025=IKcos(j5);
IkReal x1026=(cj2*r22);
IkReal x1027=((1.0)*j7);
IkReal x1028=(r12*sj1);
IkReal x1029=(cj1*r02);
IkReal x1030=(sj1*sj2);
IkReal x1031=((1.0)*x1025);
IkReal x1032=(r02*x1030);
IkReal x1033=((1.0)*cj1*sj2);
evalcond[0]=((((-1.0)*x1024))+((cj1*r01))+((r11*sj1)));
evalcond[1]=((((-1.0)*x1031))+x1029+x1028);
evalcond[2]=(x1032+x1024+x1026+(((-1.0)*r12*x1033)));
evalcond[3]=((((-1.0)*x1031))+(((-1.0)*r11*x1033))+((cj2*r21))+((r01*x1030)));
evalcond[4]=((-0.15175)+((cj1*px))+(((-0.07042834)*x1025))+((py*sj1))+(((-1.0)*x1027*x1028))+(((-1.0)*x1027*x1029)));
evalcond[5]=((0.00025011)+(((-1.0)*x1027*x1032))+(((0.07042834)*x1024))+(((-1.0)*py*x1033))+((px*x1030))+(((-1.0)*x1026*x1027))+((cj1*j7*r12*sj2))+((cj2*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1034=((1.0)*cj1);
CheckValue<IkReal> x1035=IKPowWithIntegerCheck(sj3,-1);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(cj3,-1);
if(!x1036.valid){
continue;
}
if( IKabs(((x1035.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x1034)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1036.value)*((((cj2*r02*sj1))+(((-1.0)*cj2*r12*x1034))+(((-1.0)*r22*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1035.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x1034))))))+IKsqr(((x1036.value)*((((cj2*r02*sj1))+(((-1.0)*cj2*r12*x1034))+(((-1.0)*r22*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1035.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x1034))))), ((x1036.value)*((((cj2*r02*sj1))+(((-1.0)*cj2*r12*x1034))+(((-1.0)*r22*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1037=IKsin(j5);
IkReal x1038=IKcos(j5);
IkReal x1039=((1.0)*cj2);
IkReal x1040=(cj1*r11);
IkReal x1041=((1.0)*sj2);
IkReal x1042=(j7*r02);
IkReal x1043=(r12*sj1);
IkReal x1044=(j7*r22);
IkReal x1045=(cj1*r12);
IkReal x1046=(sj1*sj2);
IkReal x1047=(cj2*sj1);
IkReal x1048=(cj1*py);
IkReal x1049=((0.07042834)*x1038);
IkReal x1050=((1.0)*x1038);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj3*x1037)));
evalcond[1]=(x1043+((cj1*r02))+((sj3*x1038)));
evalcond[2]=(((r02*x1046))+x1037+(((-1.0)*x1041*x1045))+((cj2*r22)));
evalcond[3]=((((-1.0)*x1050))+((r01*x1046))+((cj2*r21))+(((-1.0)*x1040*x1041)));
evalcond[4]=((((-1.0)*cj3*x1037))+(((-1.0)*x1039*x1040))+((r01*x1047))+(((-1.0)*r21*x1041)));
evalcond[5]=(((r02*x1047))+(((-1.0)*r22*x1041))+(((-1.0)*x1039*x1045))+(((-1.0)*cj3*x1050)));
evalcond[6]=((-0.1515)+(((-1.0)*j7*x1043))+(((-1.0)*cj1*x1042))+((sj3*x1049))+((cj1*px))+(((-0.109)*cj3))+(((0.00025)*sj3))+((py*sj1)));
evalcond[7]=((0.00025011)+(((0.07042834)*x1037))+((px*x1046))+((j7*sj2*x1045))+(((-1.0)*x1039*x1044))+(((-1.0)*x1041*x1048))+((cj2*pz))+(((-1.0)*sj1*x1041*x1042)));
evalcond[8]=((((-1.0)*cj3*x1049))+((cj2*j7*x1045))+(((-0.00025)*cj3))+((px*x1047))+((sj2*x1044))+(((-1.0)*x1039*x1048))+(((-1.0)*sj1*x1039*x1042))+(((-1.0)*pz*x1041))+(((-0.109)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1051=((1.0)*cj1);
CheckValue<IkReal> x1052=IKPowWithIntegerCheck(sj3,-1);
if(!x1052.valid){
continue;
}
if( IKabs(((x1052.value)*(((((-1.0)*r01*x1051))+(((-1.0)*r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj2*x1051))+((cj2*r21))+((r01*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1052.value)*(((((-1.0)*r01*x1051))+(((-1.0)*r11*sj1))))))+IKsqr(((((-1.0)*r11*sj2*x1051))+((cj2*r21))+((r01*sj1*sj2))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1052.value)*(((((-1.0)*r01*x1051))+(((-1.0)*r11*sj1))))), ((((-1.0)*r11*sj2*x1051))+((cj2*r21))+((r01*sj1*sj2))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1053=IKsin(j5);
IkReal x1054=IKcos(j5);
IkReal x1055=((1.0)*cj2);
IkReal x1056=(cj1*r11);
IkReal x1057=((1.0)*sj2);
IkReal x1058=(j7*r02);
IkReal x1059=(r12*sj1);
IkReal x1060=(j7*r22);
IkReal x1061=(cj1*r12);
IkReal x1062=(sj1*sj2);
IkReal x1063=(cj2*sj1);
IkReal x1064=(cj1*py);
IkReal x1065=((0.07042834)*x1054);
IkReal x1066=((1.0)*x1054);
evalcond[0]=(((cj1*r01))+((sj3*x1053))+((r11*sj1)));
evalcond[1]=(x1059+((cj1*r02))+((sj3*x1054)));
evalcond[2]=(x1053+(((-1.0)*x1057*x1061))+((cj2*r22))+((r02*x1062)));
evalcond[3]=(((cj2*r21))+((r01*x1062))+(((-1.0)*x1056*x1057))+(((-1.0)*x1066)));
evalcond[4]=((((-1.0)*x1055*x1056))+(((-1.0)*cj3*x1053))+((r01*x1063))+(((-1.0)*r21*x1057)));
evalcond[5]=((((-1.0)*r22*x1057))+(((-1.0)*x1055*x1061))+((r02*x1063))+(((-1.0)*cj3*x1066)));
evalcond[6]=((-0.1515)+((sj3*x1065))+(((-1.0)*j7*x1059))+((cj1*px))+(((-1.0)*cj1*x1058))+(((-0.109)*cj3))+(((0.00025)*sj3))+((py*sj1)));
evalcond[7]=((0.00025011)+((px*x1062))+((j7*sj2*x1061))+(((-1.0)*x1057*x1064))+(((0.07042834)*x1053))+(((-1.0)*sj1*x1057*x1058))+((cj2*pz))+(((-1.0)*x1055*x1060)));
evalcond[8]=((((-0.00025)*cj3))+((sj2*x1060))+((cj2*j7*x1061))+((px*x1063))+(((-1.0)*pz*x1057))+(((-1.0)*x1055*x1064))+(((-1.0)*sj1*x1055*x1058))+(((-1.0)*cj3*x1065))+(((-0.109)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1067=((1.0)*cj1);
IkReal x1068=((1.0)*sj1);
CheckValue<IkReal> x1069 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x1067))+(((-1.0)*r11*x1068)))),IkReal(((((-1.0)*r02*x1067))+(((-1.0)*r12*x1068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1069.valid){
continue;
}
CheckValue<IkReal> x1070=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1070.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1069.value)+(((1.5707963267949)*(x1070.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1071=IKsin(j5);
IkReal x1072=IKcos(j5);
IkReal x1073=((1.0)*cj2);
IkReal x1074=(cj1*r11);
IkReal x1075=((1.0)*sj2);
IkReal x1076=(j7*r02);
IkReal x1077=(r12*sj1);
IkReal x1078=(j7*r22);
IkReal x1079=(cj1*r12);
IkReal x1080=(sj1*sj2);
IkReal x1081=(cj2*sj1);
IkReal x1082=(cj1*py);
IkReal x1083=((0.07042834)*x1072);
IkReal x1084=((1.0)*x1072);
evalcond[0]=(((sj3*x1071))+((cj1*r01))+((r11*sj1)));
evalcond[1]=(x1077+((sj3*x1072))+((cj1*r02)));
evalcond[2]=((((-1.0)*x1075*x1079))+x1071+((cj2*r22))+((r02*x1080)));
evalcond[3]=((((-1.0)*x1074*x1075))+((r01*x1080))+((cj2*r21))+(((-1.0)*x1084)));
evalcond[4]=((((-1.0)*r21*x1075))+(((-1.0)*x1073*x1074))+((r01*x1081))+(((-1.0)*cj3*x1071)));
evalcond[5]=((((-1.0)*x1073*x1079))+(((-1.0)*r22*x1075))+((r02*x1081))+(((-1.0)*cj3*x1084)));
evalcond[6]=((-0.1515)+((sj3*x1083))+(((-1.0)*cj1*x1076))+((cj1*px))+(((-0.109)*cj3))+(((-1.0)*j7*x1077))+(((0.00025)*sj3))+((py*sj1)));
evalcond[7]=((0.00025011)+(((-1.0)*x1073*x1078))+((px*x1080))+((j7*sj2*x1079))+((cj2*pz))+(((0.07042834)*x1071))+(((-1.0)*sj1*x1075*x1076))+(((-1.0)*x1075*x1082)));
evalcond[8]=((((-0.00025)*cj3))+((cj2*j7*x1079))+((sj2*x1078))+(((-1.0)*sj1*x1073*x1076))+((px*x1081))+(((-1.0)*pz*x1075))+(((-1.0)*x1073*x1082))+(((-1.0)*cj3*x1083))+(((-0.109)*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1085=((1.0)*cj1);
IkReal x1086=((1.0)*sj1);
j5eval[0]=sj3;
j5eval[1]=((IKabs(((((-1.0)*r02*x1085))+(((-1.0)*r12*x1086)))))+(IKabs(((((-1.0)*r11*x1086))+(((-1.0)*r01*x1085))))));
j5eval[2]=IKsign(sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=sj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=sj3;
j5eval[1]=cj3;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1087=(cj1*sj2);
IkReal x1088=(sj1*sj2);
if( IKabs(((((-1.0)*r12*x1087))+((cj2*r22))+((r02*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1088))+((r11*x1087))+(((-1.0)*cj2*r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1087))+((cj2*r22))+((r02*x1088))))+IKsqr(((((-1.0)*r01*x1088))+((r11*x1087))+(((-1.0)*cj2*r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r12*x1087))+((cj2*r22))+((r02*x1088))), ((((-1.0)*r01*x1088))+((r11*x1087))+(((-1.0)*cj2*r21))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1089=IKcos(j5);
IkReal x1090=IKsin(j5);
IkReal x1091=((1.0)*cj2);
IkReal x1092=(cj1*r11);
IkReal x1093=((1.0)*sj2);
IkReal x1094=(r02*sj1);
IkReal x1095=(cj2*sj1);
IkReal x1096=(j7*r22);
IkReal x1097=(cj1*r12);
IkReal x1098=(sj1*sj2);
IkReal x1099=(cj1*py);
IkReal x1100=((1.0)*x1090);
evalcond[0]=(x1089+((r01*x1098))+((cj2*r21))+(((-1.0)*x1092*x1093)));
evalcond[1]=(((cj2*r22))+(((-1.0)*x1093*x1097))+((sj2*x1094))+(((-1.0)*x1100)));
evalcond[2]=((((-1.0)*x1091*x1092))+((r01*x1095))+(((-1.0)*r21*x1093))+(((-1.0)*x1100)));
evalcond[3]=((((-1.0)*x1091*x1097))+(((-1.0)*x1089))+((cj2*x1094))+(((-1.0)*r22*x1093)));
evalcond[4]=((0.00024989)+(((-1.0)*x1091*x1096))+((j7*sj2*x1097))+(((-0.07042834)*x1090))+((cj2*pz))+(((-1.0)*j7*x1093*x1094))+(((-1.0)*x1093*x1099))+((px*x1098)));
evalcond[5]=((-0.00025)+(((-1.0)*j7*x1091*x1094))+(((-1.0)*x1091*x1099))+(((-1.0)*pz*x1093))+((cj2*j7*x1097))+((sj2*x1096))+((px*x1095))+(((-0.07042834)*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1101=((1.0)*cj2);
IkReal x1102=(cj1*r11);
IkReal x1103=(r01*sj1);
if( IKabs((((r21*sj2))+((cj2*x1102))+(((-1.0)*x1101*x1103)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x1102))+(((-1.0)*sj2*x1103))+(((-1.0)*r21*x1101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj2))+((cj2*x1102))+(((-1.0)*x1101*x1103))))+IKsqr((((sj2*x1102))+(((-1.0)*sj2*x1103))+(((-1.0)*r21*x1101))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*sj2))+((cj2*x1102))+(((-1.0)*x1101*x1103))), (((sj2*x1102))+(((-1.0)*sj2*x1103))+(((-1.0)*r21*x1101))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1104=IKcos(j5);
IkReal x1105=IKsin(j5);
IkReal x1106=((1.0)*cj2);
IkReal x1107=(cj1*r11);
IkReal x1108=((1.0)*sj2);
IkReal x1109=(r02*sj1);
IkReal x1110=(cj2*sj1);
IkReal x1111=(j7*r22);
IkReal x1112=(cj1*r12);
IkReal x1113=(sj1*sj2);
IkReal x1114=(cj1*py);
evalcond[0]=(x1104+((r01*x1113))+((cj2*r21))+(((-1.0)*x1107*x1108)));
evalcond[1]=(x1105+(((-1.0)*r21*x1108))+((r01*x1110))+(((-1.0)*x1106*x1107)));
evalcond[2]=(x1104+(((-1.0)*r22*x1108))+(((-1.0)*x1106*x1112))+((cj2*x1109)));
evalcond[3]=(((sj2*x1109))+(((-1.0)*x1105))+(((-1.0)*x1108*x1112))+((cj2*r22)));
evalcond[4]=((0.00024989)+(((-1.0)*j7*x1108*x1109))+((j7*sj2*x1112))+(((-1.0)*x1108*x1114))+(((-1.0)*x1106*x1111))+((cj2*pz))+((px*x1113))+(((-0.07042834)*x1105)));
evalcond[5]=((0.00025)+((sj2*x1111))+((cj2*j7*x1112))+(((-1.0)*j7*x1106*x1109))+(((-1.0)*pz*x1108))+(((0.07042834)*x1104))+(((-1.0)*x1106*x1114))+((px*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1115=((1.0)*cj1);
IkReal x1116=((1.0)*sj1);
if( IKabs(((((-1.0)*r11*x1116))+(((-1.0)*r01*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x1116))+(((-1.0)*r02*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1116))+(((-1.0)*r01*x1115))))+IKsqr(((((-1.0)*r12*x1116))+(((-1.0)*r02*x1115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r11*x1116))+(((-1.0)*r01*x1115))), ((((-1.0)*r12*x1116))+(((-1.0)*r02*x1115))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1117=IKcos(j5);
IkReal x1118=IKsin(j5);
IkReal x1119=(cj2*r22);
IkReal x1120=((1.0)*j7);
IkReal x1121=(r12*sj1);
IkReal x1122=(cj1*r02);
IkReal x1123=(sj1*sj2);
IkReal x1124=(r02*x1123);
IkReal x1125=((1.0)*cj1*sj2);
evalcond[0]=(x1118+((cj1*r01))+((r11*sj1)));
evalcond[1]=(x1117+x1121+x1122);
evalcond[2]=(x1117+((r01*x1123))+(((-1.0)*r11*x1125))+((cj2*r21)));
evalcond[3]=(x1119+x1124+(((-1.0)*r12*x1125))+(((-1.0)*x1118)));
evalcond[4]=((-0.15125)+((cj1*px))+(((0.07042834)*x1117))+(((-1.0)*x1120*x1121))+(((-1.0)*x1120*x1122))+((py*sj1)));
evalcond[5]=((0.00024989)+((px*x1123))+((cj1*j7*r12*sj2))+(((-1.0)*py*x1125))+((cj2*pz))+(((-1.0)*x1119*x1120))+(((-1.0)*x1120*x1124))+(((-0.07042834)*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r01))+((r11*sj1))))+IKsqr((((cj1*r02))+((r12*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r01))+((r11*sj1))), (((cj1*r02))+((r12*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1126=IKcos(j5);
IkReal x1127=IKsin(j5);
IkReal x1128=(cj2*r22);
IkReal x1129=((1.0)*j7);
IkReal x1130=(r12*sj1);
IkReal x1131=(cj1*r02);
IkReal x1132=(sj1*sj2);
IkReal x1133=((1.0)*x1127);
IkReal x1134=(r02*x1132);
IkReal x1135=((1.0)*cj1*sj2);
evalcond[0]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x1133)));
evalcond[1]=(x1131+x1130+(((-1.0)*x1126)));
evalcond[2]=(x1126+((r01*x1132))+(((-1.0)*r11*x1135))+((cj2*r21)));
evalcond[3]=(x1128+x1134+(((-1.0)*r12*x1135))+(((-1.0)*x1133)));
evalcond[4]=((-0.15175)+((cj1*px))+(((-0.07042834)*x1126))+((py*sj1))+(((-1.0)*x1129*x1131))+(((-1.0)*x1129*x1130)));
evalcond[5]=((0.00024989)+((cj1*j7*r12*sj2))+(((-1.0)*py*x1135))+((px*x1132))+(((-0.07042834)*x1127))+(((-1.0)*x1128*x1129))+((cj2*pz))+(((-1.0)*x1129*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1136=((1.0)*cj1);
CheckValue<IkReal> x1137=IKPowWithIntegerCheck(sj3,-1);
if(!x1137.valid){
continue;
}
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(cj3,-1);
if(!x1138.valid){
continue;
}
if( IKabs(((x1137.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x1136)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1138.value)*((((cj2*r02*sj1))+(((-1.0)*r22*sj2))+(((-1.0)*cj2*r12*x1136)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1137.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x1136))))))+IKsqr(((x1138.value)*((((cj2*r02*sj1))+(((-1.0)*r22*sj2))+(((-1.0)*cj2*r12*x1136))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1137.value)*(((((-1.0)*r11*sj1))+(((-1.0)*r01*x1136))))), ((x1138.value)*((((cj2*r02*sj1))+(((-1.0)*r22*sj2))+(((-1.0)*cj2*r12*x1136))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1139=IKcos(j5);
IkReal x1140=IKsin(j5);
IkReal x1141=((1.0)*cj2);
IkReal x1142=(cj1*r11);
IkReal x1143=((1.0)*sj2);
IkReal x1144=(j7*r02);
IkReal x1145=(r12*sj1);
IkReal x1146=(j7*r22);
IkReal x1147=((1.0)*cj3);
IkReal x1148=(cj1*r12);
IkReal x1149=(sj1*sj2);
IkReal x1150=(cj2*sj1);
IkReal x1151=(cj1*py);
IkReal x1152=((0.07042834)*x1139);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj3*x1140)));
evalcond[1]=(x1145+((cj1*r02))+((sj3*x1139)));
evalcond[2]=(x1139+((cj2*r21))+((r01*x1149))+(((-1.0)*x1142*x1143)));
evalcond[3]=((((-1.0)*x1143*x1148))+((r02*x1149))+(((-1.0)*x1140))+((cj2*r22)));
evalcond[4]=((((-1.0)*x1140*x1147))+(((-1.0)*x1141*x1142))+(((-1.0)*r21*x1143))+((r01*x1150)));
evalcond[5]=((((-1.0)*x1141*x1148))+((r02*x1150))+(((-1.0)*x1139*x1147))+(((-1.0)*r22*x1143)));
evalcond[6]=((-0.1515)+(((-1.0)*j7*x1145))+(((-0.047)*cj3))+(((-1.0)*cj1*x1144))+((sj3*x1152))+((cj1*px))+(((0.00025)*sj3))+((py*sj1)));
evalcond[7]=((0.00024989)+(((-1.0)*x1141*x1146))+(((-1.0)*x1143*x1151))+(((-0.07042834)*x1140))+(((-1.0)*sj1*x1143*x1144))+((cj2*pz))+((j7*sj2*x1148))+((px*x1149)));
evalcond[8]=((((-1.0)*x1141*x1151))+(((-0.00025)*cj3))+(((-0.047)*sj3))+(((-1.0)*sj1*x1141*x1144))+((sj2*x1146))+((cj2*j7*x1148))+(((-1.0)*cj3*x1152))+(((-1.0)*pz*x1143))+((px*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1153=((1.0)*cj1);
CheckValue<IkReal> x1154=IKPowWithIntegerCheck(sj3,-1);
if(!x1154.valid){
continue;
}
if( IKabs(((((-1.0)*r12*sj2*x1153))+((cj2*r22))+((r02*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1154.value)*(((((-1.0)*r02*x1153))+(((-1.0)*r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj2*x1153))+((cj2*r22))+((r02*sj1*sj2))))+IKsqr(((x1154.value)*(((((-1.0)*r02*x1153))+(((-1.0)*r12*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r12*sj2*x1153))+((cj2*r22))+((r02*sj1*sj2))), ((x1154.value)*(((((-1.0)*r02*x1153))+(((-1.0)*r12*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1155=IKcos(j5);
IkReal x1156=IKsin(j5);
IkReal x1157=((1.0)*cj2);
IkReal x1158=(cj1*r11);
IkReal x1159=((1.0)*sj2);
IkReal x1160=(j7*r02);
IkReal x1161=(r12*sj1);
IkReal x1162=(j7*r22);
IkReal x1163=((1.0)*cj3);
IkReal x1164=(cj1*r12);
IkReal x1165=(sj1*sj2);
IkReal x1166=(cj2*sj1);
IkReal x1167=(cj1*py);
IkReal x1168=((0.07042834)*x1155);
evalcond[0]=(((cj1*r01))+((sj3*x1156))+((r11*sj1)));
evalcond[1]=(x1161+((cj1*r02))+((sj3*x1155)));
evalcond[2]=(x1155+((r01*x1165))+(((-1.0)*x1158*x1159))+((cj2*r21)));
evalcond[3]=(((r02*x1165))+(((-1.0)*x1159*x1164))+((cj2*r22))+(((-1.0)*x1156)));
evalcond[4]=((((-1.0)*x1156*x1163))+(((-1.0)*x1157*x1158))+((r01*x1166))+(((-1.0)*r21*x1159)));
evalcond[5]=(((r02*x1166))+(((-1.0)*r22*x1159))+(((-1.0)*x1155*x1163))+(((-1.0)*x1157*x1164)));
evalcond[6]=((-0.1515)+(((-0.047)*cj3))+((cj1*px))+(((-1.0)*j7*x1161))+(((0.00025)*sj3))+((py*sj1))+(((-1.0)*cj1*x1160))+((sj3*x1168)));
evalcond[7]=((0.00024989)+(((-0.07042834)*x1156))+((px*x1165))+(((-1.0)*x1159*x1167))+((j7*sj2*x1164))+(((-1.0)*sj1*x1159*x1160))+((cj2*pz))+(((-1.0)*x1157*x1162)));
evalcond[8]=(((sj2*x1162))+((cj2*j7*x1164))+((px*x1166))+(((-0.00025)*cj3))+(((-0.047)*sj3))+(((-1.0)*cj3*x1168))+(((-1.0)*sj1*x1157*x1160))+(((-1.0)*pz*x1159))+(((-1.0)*x1157*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1169=((1.0)*cj1);
IkReal x1170=((1.0)*sj1);
CheckValue<IkReal> x1171=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1171.valid){
continue;
}
CheckValue<IkReal> x1172 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1170))+(((-1.0)*r01*x1169)))),IkReal(((((-1.0)*r02*x1169))+(((-1.0)*r12*x1170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1172.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1171.value)))+(x1172.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1173=IKcos(j5);
IkReal x1174=IKsin(j5);
IkReal x1175=((1.0)*cj2);
IkReal x1176=(cj1*r11);
IkReal x1177=((1.0)*sj2);
IkReal x1178=(j7*r02);
IkReal x1179=(r12*sj1);
IkReal x1180=(j7*r22);
IkReal x1181=((1.0)*cj3);
IkReal x1182=(cj1*r12);
IkReal x1183=(sj1*sj2);
IkReal x1184=(cj2*sj1);
IkReal x1185=(cj1*py);
IkReal x1186=((0.07042834)*x1173);
evalcond[0]=(((sj3*x1174))+((cj1*r01))+((r11*sj1)));
evalcond[1]=(x1179+((sj3*x1173))+((cj1*r02)));
evalcond[2]=(x1173+((r01*x1183))+((cj2*r21))+(((-1.0)*x1176*x1177)));
evalcond[3]=(((cj2*r22))+((r02*x1183))+(((-1.0)*x1177*x1182))+(((-1.0)*x1174)));
evalcond[4]=((((-1.0)*r21*x1177))+((r01*x1184))+(((-1.0)*x1175*x1176))+(((-1.0)*x1174*x1181)));
evalcond[5]=((((-1.0)*x1175*x1182))+(((-1.0)*r22*x1177))+(((-1.0)*x1173*x1181))+((r02*x1184)));
evalcond[6]=((-0.1515)+(((-0.047)*cj3))+((cj1*px))+(((-1.0)*j7*x1179))+((sj3*x1186))+(((0.00025)*sj3))+((py*sj1))+(((-1.0)*cj1*x1178)));
evalcond[7]=((0.00024989)+(((-1.0)*sj1*x1177*x1178))+(((-1.0)*x1175*x1180))+((j7*sj2*x1182))+((px*x1183))+((cj2*pz))+(((-0.07042834)*x1174))+(((-1.0)*x1177*x1185)));
evalcond[8]=((((-1.0)*x1175*x1185))+(((-1.0)*sj1*x1175*x1178))+(((-0.00025)*cj3))+(((-0.047)*sj3))+((cj2*j7*x1182))+(((-1.0)*pz*x1177))+(((-1.0)*cj3*x1186))+((px*x1184))+((sj2*x1180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))))+(IKabs((((cj1*r02))+((r12*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=sj4;
j5eval[1]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((r12*sj1))))+IKsqr(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r02))+((r12*sj1))), ((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1187=IKcos(j5);
IkReal x1188=IKsin(j5);
IkReal x1189=(cj1*cj2);
IkReal x1190=(r12*sj1);
IkReal x1191=((1.0)*sj2);
IkReal x1192=((1.0)*j7);
IkReal x1193=(cj1*r02);
IkReal x1194=(cj2*sj1);
IkReal x1195=((1.0)*x1188);
IkReal x1196=(r02*x1194);
evalcond[0]=(x1187+((cj1*r01))+((r11*sj1)));
evalcond[1]=(x1190+x1193+(((-1.0)*x1195)));
evalcond[2]=(((r01*x1194))+(((-1.0)*x1195))+(((-1.0)*r21*x1191))+(((-1.0)*r11*x1189)));
evalcond[3]=(x1196+(((-1.0)*r12*x1189))+(((-1.0)*r22*x1191))+(((-1.0)*x1187)));
evalcond[4]=((-0.22950011)+(((-1.0)*x1190*x1192))+(((-0.07042834)*x1188))+((cj1*px))+((py*sj1))+(((-1.0)*x1192*x1193)));
evalcond[5]=((-0.00025)+((j7*r22*sj2))+(((-1.0)*pz*x1191))+(((-0.07042834)*x1187))+((px*x1194))+(((-1.0)*py*x1189))+((j7*r12*x1189))+(((-1.0)*x1192*x1196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))))+IKsqr((((cj1*r01))+((r11*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))), (((cj1*r01))+((r11*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1197=IKsin(j5);
IkReal x1198=IKcos(j5);
IkReal x1199=(cj1*cj2);
IkReal x1200=(r12*sj1);
IkReal x1201=((1.0)*sj2);
IkReal x1202=((1.0)*j7);
IkReal x1203=(cj1*r02);
IkReal x1204=(cj2*sj1);
IkReal x1205=((1.0)*x1198);
IkReal x1206=(r02*x1204);
evalcond[0]=(x1197+x1200+x1203);
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x1205)));
evalcond[2]=(((r01*x1204))+(((-1.0)*r21*x1201))+(((-1.0)*x1197))+(((-1.0)*r11*x1199)));
evalcond[3]=((((-1.0)*r12*x1199))+x1206+(((-1.0)*r22*x1201))+(((-1.0)*x1205)));
evalcond[4]=((-0.22949989)+(((0.07042834)*x1197))+((cj1*px))+(((-1.0)*x1202*x1203))+(((-1.0)*x1200*x1202))+((py*sj1)));
evalcond[5]=((-0.00025)+(((-1.0)*pz*x1201))+((px*x1204))+((j7*r22*sj2))+(((-0.07042834)*x1198))+(((-1.0)*x1202*x1206))+(((-1.0)*py*x1199))+((j7*r12*x1199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(sj4,-1);
if(!x1207.valid){
continue;
}
CheckValue<IkReal> x1208=IKPowWithIntegerCheck(cj4,-1);
if(!x1208.valid){
continue;
}
if( IKabs(((x1207.value)*((((cj1*r02))+((r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1208.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1207.value)*((((cj1*r02))+((r12*sj1))))))+IKsqr(((x1208.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1207.value)*((((cj1*r02))+((r12*sj1))))), ((x1208.value)*(((((-1.0)*cj1*r11*sj2))+((cj2*r21))+((r01*sj1*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1209=IKsin(j5);
IkReal x1210=IKcos(j5);
IkReal x1211=(cj1*cj2);
IkReal x1212=((1.0)*r11);
IkReal x1213=(cj2*r22);
IkReal x1214=((1.0)*sj2);
IkReal x1215=(j7*r02);
IkReal x1216=(r12*sj1);
IkReal x1217=(j7*r12);
IkReal x1218=(sj1*sj2);
IkReal x1219=(cj2*sj1);
IkReal x1220=(cj1*sj2);
IkReal x1221=((1.0)*j7);
IkReal x1222=((1.0)*x1209);
IkReal x1223=(cj4*x1209);
IkReal x1224=((1.0)*x1210);
evalcond[0]=(((sj4*x1210))+((cj1*r01))+((r11*sj1)));
evalcond[1]=(x1216+((cj1*r02))+(((-1.0)*sj4*x1222)));
evalcond[2]=(x1223+x1213+((r02*x1218))+(((-1.0)*cj1*r12*x1214)));
evalcond[3]=((((-1.0)*x1212*x1220))+(((-1.0)*cj4*x1224))+((r01*x1218))+((cj2*r21)));
evalcond[4]=((((-1.0)*x1222))+((r01*x1219))+(((-1.0)*x1211*x1212))+(((-1.0)*r21*x1214)));
evalcond[5]=(((r02*x1219))+(((-1.0)*x1224))+(((-1.0)*r22*x1214))+(((-1.0)*r12*x1211)));
evalcond[6]=((-0.2295)+(((-0.031)*cj4))+(((-1.0)*cj1*x1215))+(((-0.07042834)*sj4*x1209))+((cj1*px))+(((-1.0)*x1216*x1221))+(((-1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((-0.00025)+(((-1.0)*py*x1211))+((j7*r22*sj2))+((px*x1219))+(((-1.0)*x1215*x1219))+((x1211*x1217))+(((-1.0)*pz*x1214))+(((-0.07042834)*x1210)));
evalcond[8]=((0.00025)+(((-1.0)*x1213*x1221))+((x1217*x1220))+(((-0.031)*sj4))+(((-1.0)*sj1*x1214*x1215))+((px*x1218))+(((0.07042834)*x1223))+((cj2*pz))+(((1.1e-7)*cj4))+(((-1.0)*cj1*py*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1225=((1.0)*cj1);
CheckValue<IkReal> x1226=IKPowWithIntegerCheck(sj4,-1);
if(!x1226.valid){
continue;
}
if( IKabs((((cj2*r01*sj1))+(((-1.0)*r21*sj2))+(((-1.0)*cj2*r11*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1226.value)*(((((-1.0)*r01*x1225))+(((-1.0)*r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*r01*sj1))+(((-1.0)*r21*sj2))+(((-1.0)*cj2*r11*x1225))))+IKsqr(((x1226.value)*(((((-1.0)*r01*x1225))+(((-1.0)*r11*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj2*r01*sj1))+(((-1.0)*r21*sj2))+(((-1.0)*cj2*r11*x1225))), ((x1226.value)*(((((-1.0)*r01*x1225))+(((-1.0)*r11*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1227=IKsin(j5);
IkReal x1228=IKcos(j5);
IkReal x1229=(cj1*cj2);
IkReal x1230=((1.0)*r11);
IkReal x1231=(cj2*r22);
IkReal x1232=((1.0)*sj2);
IkReal x1233=(j7*r02);
IkReal x1234=(r12*sj1);
IkReal x1235=(j7*r12);
IkReal x1236=(sj1*sj2);
IkReal x1237=(cj2*sj1);
IkReal x1238=(cj1*sj2);
IkReal x1239=((1.0)*j7);
IkReal x1240=((1.0)*x1227);
IkReal x1241=(cj4*x1227);
IkReal x1242=((1.0)*x1228);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj4*x1228)));
evalcond[1]=(x1234+((cj1*r02))+(((-1.0)*sj4*x1240)));
evalcond[2]=(x1241+x1231+((r02*x1236))+(((-1.0)*cj1*r12*x1232)));
evalcond[3]=(((r01*x1236))+(((-1.0)*cj4*x1242))+(((-1.0)*x1230*x1238))+((cj2*r21)));
evalcond[4]=(((r01*x1237))+(((-1.0)*r21*x1232))+(((-1.0)*x1240))+(((-1.0)*x1229*x1230)));
evalcond[5]=((((-1.0)*r12*x1229))+(((-1.0)*x1242))+((r02*x1237))+(((-1.0)*r22*x1232)));
evalcond[6]=((-0.2295)+(((-0.07042834)*sj4*x1227))+(((-0.031)*cj4))+((cj1*px))+(((-1.0)*cj1*x1233))+(((-1.0)*x1234*x1239))+(((-1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((-0.00025)+(((-1.0)*x1233*x1237))+(((-0.07042834)*x1228))+((j7*r22*sj2))+(((-1.0)*pz*x1232))+(((-1.0)*py*x1229))+((px*x1237))+((x1229*x1235)));
evalcond[8]=((0.00025)+((x1235*x1238))+(((-0.031)*sj4))+((px*x1236))+((cj2*pz))+(((-1.0)*sj1*x1232*x1233))+(((-1.0)*x1231*x1239))+(((0.07042834)*x1241))+(((1.1e-7)*cj4))+(((-1.0)*cj1*py*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1243 = IKatan2WithCheck(IkReal((((cj1*r02))+((r12*sj1)))),IkReal(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1243.valid){
continue;
}
CheckValue<IkReal> x1244=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1244.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1243.value)+(((1.5707963267949)*(x1244.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1245=IKsin(j5);
IkReal x1246=IKcos(j5);
IkReal x1247=(cj1*cj2);
IkReal x1248=((1.0)*r11);
IkReal x1249=(cj2*r22);
IkReal x1250=((1.0)*sj2);
IkReal x1251=(j7*r02);
IkReal x1252=(r12*sj1);
IkReal x1253=(j7*r12);
IkReal x1254=(sj1*sj2);
IkReal x1255=(cj2*sj1);
IkReal x1256=(cj1*sj2);
IkReal x1257=((1.0)*j7);
IkReal x1258=((1.0)*x1245);
IkReal x1259=(cj4*x1245);
IkReal x1260=((1.0)*x1246);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj4*x1246)));
evalcond[1]=(x1252+((cj1*r02))+(((-1.0)*sj4*x1258)));
evalcond[2]=(x1249+x1259+(((-1.0)*cj1*r12*x1250))+((r02*x1254)));
evalcond[3]=((((-1.0)*x1248*x1256))+((cj2*r21))+(((-1.0)*cj4*x1260))+((r01*x1254)));
evalcond[4]=((((-1.0)*x1258))+(((-1.0)*r21*x1250))+((r01*x1255))+(((-1.0)*x1247*x1248)));
evalcond[5]=(((r02*x1255))+(((-1.0)*r22*x1250))+(((-1.0)*r12*x1247))+(((-1.0)*x1260)));
evalcond[6]=((-0.2295)+(((-0.031)*cj4))+(((-1.0)*x1252*x1257))+(((-1.0)*cj1*x1251))+((cj1*px))+(((-0.07042834)*sj4*x1245))+(((-1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((-0.00025)+((x1247*x1253))+(((-1.0)*x1251*x1255))+((j7*r22*sj2))+(((-0.07042834)*x1246))+(((-1.0)*py*x1247))+(((-1.0)*pz*x1250))+((px*x1255)));
evalcond[8]=((0.00025)+(((-1.0)*x1249*x1257))+(((0.07042834)*x1259))+(((-0.031)*sj4))+((x1253*x1256))+((cj2*pz))+(((-1.0)*cj1*py*x1250))+(((-1.0)*sj1*x1250*x1251))+((px*x1254))+(((1.1e-7)*cj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
j5eval[2]=((IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))))+(IKabs((((cj1*r01))+((r11*sj1))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=sj4;
j5eval[1]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01))+((r11*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))))+IKsqr((((cj1*r01))+((r11*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1))), (((cj1*r01))+((r11*sj1))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1261=IKsin(j5);
IkReal x1262=IKcos(j5);
IkReal x1263=(cj1*cj2);
IkReal x1264=(cj2*sj1);
IkReal x1265=((1.0)*sj2);
IkReal x1266=(j7*r12);
IkReal x1267=((1.0)*j7*r02);
evalcond[0]=(x1261+((cj1*r02))+((r12*sj1)));
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*x1262)));
evalcond[2]=(x1261+(((-1.0)*r21*x1265))+(((-1.0)*r11*x1263))+((r01*x1264)));
evalcond[3]=(x1262+(((-1.0)*r22*x1265))+((r02*x1264))+(((-1.0)*r12*x1263)));
evalcond[4]=((-0.07349989)+(((0.07042834)*x1261))+((cj1*px))+(((-1.0)*cj1*x1267))+(((-1.0)*sj1*x1266))+((py*sj1)));
evalcond[5]=((0.00025)+(((-1.0)*x1264*x1267))+(((0.07042834)*x1262))+(((-1.0)*py*x1263))+((j7*r22*sj2))+((x1263*x1266))+(((-1.0)*pz*x1265))+((px*x1264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs((((cj1*r02))+((r12*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r02))+((r12*sj1))))+IKsqr(((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj1*r02))+((r12*sj1))), ((((-1.0)*r11*sj1))+(((-1.0)*cj1*r01))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x1268=IKsin(j5);
IkReal x1269=IKcos(j5);
IkReal x1270=(cj1*cj2);
IkReal x1271=(r12*sj1);
IkReal x1272=((1.0)*sj2);
IkReal x1273=((1.0)*j7);
IkReal x1274=(cj1*r02);
IkReal x1275=(cj2*sj1);
IkReal x1276=(r02*x1275);
evalcond[0]=(x1269+((cj1*r01))+((r11*sj1)));
evalcond[1]=(x1271+x1274+(((-1.0)*x1268)));
evalcond[2]=(x1268+(((-1.0)*r11*x1270))+((r01*x1275))+(((-1.0)*r21*x1272)));
evalcond[3]=(x1276+x1269+(((-1.0)*r22*x1272))+(((-1.0)*r12*x1270)));
evalcond[4]=((-0.07350011)+(((-0.07042834)*x1268))+(((-1.0)*x1271*x1273))+((cj1*px))+(((-1.0)*x1273*x1274))+((py*sj1)));
evalcond[5]=((0.00025)+(((-1.0)*py*x1270))+(((0.07042834)*x1269))+((j7*r22*sj2))+((j7*r12*x1270))+(((-1.0)*x1273*x1276))+((px*x1275))+(((-1.0)*pz*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1277=((1.0)*cj1);
CheckValue<IkReal> x1278=IKPowWithIntegerCheck(sj4,-1);
if(!x1278.valid){
continue;
}
CheckValue<IkReal> x1279=IKPowWithIntegerCheck(cj4,-1);
if(!x1279.valid){
continue;
}
if( IKabs(((x1278.value)*(((((-1.0)*r02*x1277))+(((-1.0)*r12*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1279.value)*((((cj2*r21))+(((-1.0)*r11*sj2*x1277))+((r01*sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1278.value)*(((((-1.0)*r02*x1277))+(((-1.0)*r12*sj1))))))+IKsqr(((x1279.value)*((((cj2*r21))+(((-1.0)*r11*sj2*x1277))+((r01*sj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1278.value)*(((((-1.0)*r02*x1277))+(((-1.0)*r12*sj1))))), ((x1279.value)*((((cj2*r21))+(((-1.0)*r11*sj2*x1277))+((r01*sj1*sj2))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1280=IKsin(j5);
IkReal x1281=IKcos(j5);
IkReal x1282=((1.0)*cj2);
IkReal x1283=(cj1*r11);
IkReal x1284=((1.0)*sj2);
IkReal x1285=(j7*r02);
IkReal x1286=(r12*sj1);
IkReal x1287=(j7*r22);
IkReal x1288=(cj1*r12);
IkReal x1289=(sj1*sj2);
IkReal x1290=(cj2*sj1);
IkReal x1291=(cj1*py);
IkReal x1292=(sj4*x1280);
IkReal x1293=(cj4*x1280);
IkReal x1294=((1.0)*x1281);
evalcond[0]=(x1286+x1292+((cj1*r02)));
evalcond[1]=((((-1.0)*sj4*x1294))+((cj1*r01))+((r11*sj1)));
evalcond[2]=(x1280+(((-1.0)*r21*x1284))+((r01*x1290))+(((-1.0)*x1282*x1283)));
evalcond[3]=(x1281+(((-1.0)*r22*x1284))+((r02*x1290))+(((-1.0)*x1282*x1288)));
evalcond[4]=(x1293+((r02*x1289))+(((-1.0)*x1284*x1288))+((cj2*r22)));
evalcond[5]=((((-1.0)*cj4*x1294))+((r01*x1289))+((cj2*r21))+(((-1.0)*x1283*x1284)));
evalcond[6]=((-0.0735)+(((0.07042834)*x1292))+(((-1.0)*cj1*x1285))+(((0.031)*cj4))+((cj1*px))+(((-1.0)*j7*x1286))+(((1.1e-7)*sj4))+((py*sj1)));
evalcond[7]=((0.00025)+(((-1.0)*sj1*x1282*x1285))+(((-1.0)*x1282*x1291))+((sj2*x1287))+(((0.07042834)*x1281))+((cj2*j7*x1288))+((px*x1290))+(((-1.0)*pz*x1284)));
evalcond[8]=((0.00025)+(((-1.0)*x1284*x1291))+(((0.07042834)*x1293))+((j7*sj2*x1288))+(((-0.031)*sj4))+((px*x1289))+((cj2*pz))+(((-1.0)*sj1*x1284*x1285))+(((1.1e-7)*cj4))+(((-1.0)*x1282*x1287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1295=IKPowWithIntegerCheck(sj4,-1);
if(!x1295.valid){
continue;
}
if( IKabs((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1295.value)*((((cj1*r01))+((r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11))))+IKsqr(((x1295.value)*((((cj1*r01))+((r11*sj1))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r21*sj2))+(((-1.0)*cj2*r01*sj1))+((cj1*cj2*r11))), ((x1295.value)*((((cj1*r01))+((r11*sj1))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1296=IKsin(j5);
IkReal x1297=IKcos(j5);
IkReal x1298=((1.0)*cj2);
IkReal x1299=(cj1*r11);
IkReal x1300=((1.0)*sj2);
IkReal x1301=(j7*r02);
IkReal x1302=(r12*sj1);
IkReal x1303=(j7*r22);
IkReal x1304=(cj1*r12);
IkReal x1305=(sj1*sj2);
IkReal x1306=(cj2*sj1);
IkReal x1307=(cj1*py);
IkReal x1308=(sj4*x1296);
IkReal x1309=(cj4*x1296);
IkReal x1310=((1.0)*x1297);
evalcond[0]=(x1302+x1308+((cj1*r02)));
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*sj4*x1310)));
evalcond[2]=(x1296+(((-1.0)*r21*x1300))+(((-1.0)*x1298*x1299))+((r01*x1306)));
evalcond[3]=(x1297+(((-1.0)*r22*x1300))+(((-1.0)*x1298*x1304))+((r02*x1306)));
evalcond[4]=(x1309+(((-1.0)*x1300*x1304))+((cj2*r22))+((r02*x1305)));
evalcond[5]=((((-1.0)*x1299*x1300))+(((-1.0)*cj4*x1310))+((cj2*r21))+((r01*x1305)));
evalcond[6]=((-0.0735)+(((0.031)*cj4))+(((-1.0)*j7*x1302))+((cj1*px))+(((1.1e-7)*sj4))+(((0.07042834)*x1308))+((py*sj1))+(((-1.0)*cj1*x1301)));
evalcond[7]=((0.00025)+((cj2*j7*x1304))+(((0.07042834)*x1297))+((sj2*x1303))+((px*x1306))+(((-1.0)*sj1*x1298*x1301))+(((-1.0)*x1298*x1307))+(((-1.0)*pz*x1300)));
evalcond[8]=((0.00025)+((px*x1305))+(((-1.0)*sj1*x1300*x1301))+(((-0.031)*sj4))+(((-1.0)*x1300*x1307))+(((-1.0)*x1298*x1303))+((cj2*pz))+(((0.07042834)*x1309))+(((1.1e-7)*cj4))+((j7*sj2*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1311.valid){
continue;
}
CheckValue<IkReal> x1312 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r02))+(((-1.0)*r12*sj1)))),IkReal((((cj1*r01))+((r11*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1312.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1311.value)))+(x1312.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1313=IKsin(j5);
IkReal x1314=IKcos(j5);
IkReal x1315=((1.0)*cj2);
IkReal x1316=(cj1*r11);
IkReal x1317=((1.0)*sj2);
IkReal x1318=(j7*r02);
IkReal x1319=(r12*sj1);
IkReal x1320=(j7*r22);
IkReal x1321=(cj1*r12);
IkReal x1322=(sj1*sj2);
IkReal x1323=(cj2*sj1);
IkReal x1324=(cj1*py);
IkReal x1325=(sj4*x1313);
IkReal x1326=(cj4*x1313);
IkReal x1327=((1.0)*x1314);
evalcond[0]=(x1319+x1325+((cj1*r02)));
evalcond[1]=(((cj1*r01))+((r11*sj1))+(((-1.0)*sj4*x1327)));
evalcond[2]=(x1313+(((-1.0)*x1315*x1316))+((r01*x1323))+(((-1.0)*r21*x1317)));
evalcond[3]=(x1314+(((-1.0)*x1315*x1321))+(((-1.0)*r22*x1317))+((r02*x1323)));
evalcond[4]=(x1326+((r02*x1322))+((cj2*r22))+(((-1.0)*x1317*x1321)));
evalcond[5]=(((r01*x1322))+(((-1.0)*cj4*x1327))+((cj2*r21))+(((-1.0)*x1316*x1317)));
evalcond[6]=((-0.0735)+(((0.031)*cj4))+((cj1*px))+(((1.1e-7)*sj4))+(((-1.0)*j7*x1319))+((py*sj1))+(((-1.0)*cj1*x1318))+(((0.07042834)*x1325)));
evalcond[7]=((0.00025)+((sj2*x1320))+(((-1.0)*x1315*x1324))+((cj2*j7*x1321))+(((-1.0)*sj1*x1315*x1318))+((px*x1323))+(((-1.0)*pz*x1317))+(((0.07042834)*x1314)));
evalcond[8]=((0.00025)+((j7*sj2*x1321))+(((-1.0)*x1315*x1320))+(((-1.0)*sj1*x1317*x1318))+(((-0.031)*sj4))+((px*x1322))+((cj2*pz))+(((1.1e-7)*cj4))+(((0.07042834)*x1326))+(((-1.0)*x1317*x1324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(cj4,-1);
if(!x1333.valid){
continue;
}
IkReal x1328=x1333.value;
IkReal x1329=((1.0)*cj1);
IkReal x1330=(r12*sj2);
IkReal x1331=(cj2*r22);
IkReal x1332=(r02*sj1*sj2);
CheckValue<IkReal> x1334=IKPowWithIntegerCheck(cj3,-1);
if(!x1334.valid){
continue;
}
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(sj4,-1);
if(!x1335.valid){
continue;
}
if( IKabs((x1328*(((((-1.0)*x1332))+(((-1.0)*x1331))+((cj1*x1330)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1328*(x1334.value)*(x1335.value)*(((((-1.0)*sj3*x1329*x1330))+(((-1.0)*cj4*r11*sj1))+((sj3*x1331))+((sj3*x1332))+(((-1.0)*cj4*r01*x1329)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1328*(((((-1.0)*x1332))+(((-1.0)*x1331))+((cj1*x1330))))))+IKsqr((x1328*(x1334.value)*(x1335.value)*(((((-1.0)*sj3*x1329*x1330))+(((-1.0)*cj4*r11*sj1))+((sj3*x1331))+((sj3*x1332))+(((-1.0)*cj4*r01*x1329))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1328*(((((-1.0)*x1332))+(((-1.0)*x1331))+((cj1*x1330))))), (x1328*(x1334.value)*(x1335.value)*(((((-1.0)*sj3*x1329*x1330))+(((-1.0)*cj4*r11*sj1))+((sj3*x1331))+((sj3*x1332))+(((-1.0)*cj4*r01*x1329))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1336=IKsin(j5);
IkReal x1337=IKcos(j5);
IkReal x1338=((1.0)*cj2);
IkReal x1339=(cj1*r11);
IkReal x1340=(r12*sj1);
IkReal x1341=(j7*r22);
IkReal x1342=((1.0)*sj2);
IkReal x1343=(sj3*sj4);
IkReal x1344=(cj1*j7);
IkReal x1345=(r02*sj1);
IkReal x1346=(r01*sj1);
IkReal x1347=(cj1*r12);
IkReal x1348=(px*sj1);
IkReal x1349=(cj3*sj4);
IkReal x1350=(cj1*py);
IkReal x1351=((0.031)*cj4);
IkReal x1352=(cj3*x1337);
IkReal x1353=((1.0)*x1336);
IkReal x1354=(sj3*x1337);
IkReal x1355=((0.07042834)*x1336);
evalcond[0]=(((cj1*r01))+((r11*sj1))+((sj3*x1336))+((x1337*x1349)));
evalcond[1]=(((cj4*x1336))+((sj2*x1345))+((cj2*r22))+(((-1.0)*x1342*x1347)));
evalcond[2]=(x1340+x1354+((cj1*r02))+(((-1.0)*x1349*x1353)));
evalcond[3]=(((sj2*x1346))+(((-1.0)*cj4*x1337))+(((-1.0)*x1339*x1342))+((cj2*r21)));
evalcond[4]=((((-1.0)*r21*x1342))+(((-1.0)*cj3*x1353))+((x1337*x1343))+(((-1.0)*x1338*x1339))+((cj2*x1346)));
evalcond[5]=((((-1.0)*x1352))+(((-1.0)*x1338*x1347))+(((-1.0)*r22*x1342))+(((-1.0)*x1343*x1353))+((cj2*x1345)));
evalcond[6]=((0.00025)+((sj2*x1348))+(((-1.0)*x1338*x1341))+((r12*sj2*x1344))+(((-0.031)*sj4))+((cj4*x1355))+(((-1.0)*j7*x1342*x1345))+((cj2*pz))+(((-1.0)*x1342*x1350))+(((1.1e-7)*cj4)));
evalcond[7]=((-0.1515)+(((-1.0)*cj3*x1351))+((cj1*px))+(((0.07042834)*x1354))+(((-0.078)*cj3))+(((0.00025)*sj3))+(((-1.1e-7)*x1349))+(((-1.0)*r02*x1344))+(((-1.0)*x1349*x1355))+(((-1.0)*j7*x1340))+((py*sj1)));
evalcond[8]=(((sj2*x1341))+(((-1.0)*x1338*x1350))+(((-1.0)*pz*x1342))+(((-0.00025)*cj3))+(((-1.0)*sj3*x1351))+(((-1.0)*j7*x1338*x1345))+(((-0.07042834)*x1352))+(((-0.078)*sj3))+(((-1.1e-7)*x1343))+((cj2*r12*x1344))+(((-1.0)*x1343*x1355))+((cj2*x1348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(cj4,-1);
if(!x1362.valid){
continue;
}
IkReal x1356=x1362.value;
IkReal x1357=(cj2*r21);
IkReal x1358=(cj3*sj4);
IkReal x1359=((1.0)*r01);
IkReal x1360=(sj1*sj2);
IkReal x1361=(cj1*r11*sj2);
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(sj3,-1);
if(!x1363.valid){
continue;
}
if( IKabs((x1356*(x1363.value)*(((((-1.0)*cj1*cj4*x1359))+(((-1.0)*x1357*x1358))+((x1358*x1361))+(((-1.0)*x1358*x1359*x1360))+(((-1.0)*cj4*r11*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1356*((x1357+(((-1.0)*x1361))+((r01*x1360)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1356*(x1363.value)*(((((-1.0)*cj1*cj4*x1359))+(((-1.0)*x1357*x1358))+((x1358*x1361))+(((-1.0)*x1358*x1359*x1360))+(((-1.0)*cj4*r11*sj1))))))+IKsqr((x1356*((x1357+(((-1.0)*x1361))+((r01*x1360))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x1356*(x1363.value)*(((((-1.0)*cj1*cj4*x1359))+(((-1.0)*x1357*x1358))+((x1358*x1361))+(((-1.0)*x1358*x1359*x1360))+(((-1.0)*cj4*r11*sj1))))), (x1356*((x1357+(((-1.0)*x1361))+((r01*x1360))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1364=IKsin(j5);
IkReal x1365=IKcos(j5);
IkReal x1366=((1.0)*cj2);
IkReal x1367=(cj1*r11);
IkReal x1368=(r12*sj1);
IkReal x1369=(j7*r22);
IkReal x1370=((1.0)*sj2);
IkReal x1371=(sj3*sj4);
IkReal x1372=(cj1*j7);
IkReal x1373=(r02*sj1);
IkReal x1374=(r01*sj1);
IkReal x1375=(cj1*r12);
IkReal x1376=(px*sj1);
IkReal x1377=(cj3*sj4);
IkReal x1378=(cj1*py);
IkReal x1379=((0.031)*cj4);
IkReal x1380=(cj3*x1365);
IkReal x1381=((1.0)*x1364);
IkReal x1382=(sj3*x1365);
IkReal x1383=((0.07042834)*x1364);
evalcond[0]=(((x1365*x1377))+((cj1*r01))+((r11*sj1))+((sj3*x1364)));
evalcond[1]=((((-1.0)*x1370*x1375))+((sj2*x1373))+((cj4*x1364))+((cj2*r22)));
evalcond[2]=(x1368+x1382+(((-1.0)*x1377*x1381))+((cj1*r02)));
evalcond[3]=((((-1.0)*cj4*x1365))+((sj2*x1374))+((cj2*r21))+(((-1.0)*x1367*x1370)));
evalcond[4]=(((x1365*x1371))+(((-1.0)*x1366*x1367))+(((-1.0)*r21*x1370))+(((-1.0)*cj3*x1381))+((cj2*x1374)));
evalcond[5]=((((-1.0)*r22*x1370))+((cj2*x1373))+(((-1.0)*x1371*x1381))+(((-1.0)*x1366*x1375))+(((-1.0)*x1380)));
evalcond[6]=((0.00025)+(((-1.0)*x1366*x1369))+(((-1.0)*x1370*x1378))+((sj2*x1376))+(((-1.0)*j7*x1370*x1373))+(((-0.031)*sj4))+((cj4*x1383))+((r12*sj2*x1372))+((cj2*pz))+(((1.1e-7)*cj4)));
evalcond[7]=((-0.1515)+(((-1.0)*r02*x1372))+(((-1.0)*cj3*x1379))+(((0.07042834)*x1382))+(((-1.0)*x1377*x1383))+((cj1*px))+(((-1.1e-7)*x1377))+(((-0.078)*cj3))+(((0.00025)*sj3))+((py*sj1))+(((-1.0)*j7*x1368)));
evalcond[8]=((((-1.0)*j7*x1366*x1373))+(((-0.00025)*cj3))+(((-0.07042834)*x1380))+(((-0.078)*sj3))+(((-1.1e-7)*x1371))+((cj2*r12*x1372))+(((-1.0)*sj3*x1379))+((cj2*x1376))+(((-1.0)*x1371*x1383))+(((-1.0)*x1366*x1378))+((sj2*x1369))+(((-1.0)*pz*x1370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1384=(cj3*sj4);
IkReal x1385=(cj1*r02);
IkReal x1386=((1.0)*sj1);
IkReal x1387=((1.0)*cj1*r01);
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj3*cj3)*(cj4*cj4))))),-1);
if(!x1388.valid){
continue;
}
CheckValue<IkReal> x1389 = IKatan2WithCheck(IkReal((((r12*sj1*x1384))+(((-1.0)*r11*sj3*x1386))+((x1384*x1385))+(((-1.0)*sj3*x1387)))),IkReal(((((-1.0)*x1384*x1387))+(((-1.0)*sj3*x1385))+(((-1.0)*r12*sj3*x1386))+(((-1.0)*r11*x1384*x1386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1389.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1388.value)))+(x1389.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x1390=IKsin(j5);
IkReal x1391=IKcos(j5);
IkReal x1392=((1.0)*cj2);
IkReal x1393=(cj1*r11);
IkReal x1394=(r12*sj1);
IkReal x1395=(j7*r22);
IkReal x1396=((1.0)*sj2);
IkReal x1397=(sj3*sj4);
IkReal x1398=(cj1*j7);
IkReal x1399=(r02*sj1);
IkReal x1400=(r01*sj1);
IkReal x1401=(cj1*r12);
IkReal x1402=(px*sj1);
IkReal x1403=(cj3*sj4);
IkReal x1404=(cj1*py);
IkReal x1405=((0.031)*cj4);
IkReal x1406=(cj3*x1391);
IkReal x1407=((1.0)*x1390);
IkReal x1408=(sj3*x1391);
IkReal x1409=((0.07042834)*x1390);
evalcond[0]=(((x1391*x1403))+((cj1*r01))+((r11*sj1))+((sj3*x1390)));
evalcond[1]=(((cj4*x1390))+((cj2*r22))+((sj2*x1399))+(((-1.0)*x1396*x1401)));
evalcond[2]=(x1394+((cj1*r02))+x1408+(((-1.0)*x1403*x1407)));
evalcond[3]=((((-1.0)*x1393*x1396))+((sj2*x1400))+((cj2*r21))+(((-1.0)*cj4*x1391)));
evalcond[4]=((((-1.0)*x1392*x1393))+(((-1.0)*r21*x1396))+(((-1.0)*cj3*x1407))+((x1391*x1397))+((cj2*x1400)));
evalcond[5]=((((-1.0)*x1406))+((cj2*x1399))+(((-1.0)*r22*x1396))+(((-1.0)*x1392*x1401))+(((-1.0)*x1397*x1407)));
evalcond[6]=((0.00025)+(((-1.0)*x1392*x1395))+(((-0.031)*sj4))+((cj4*x1409))+((r12*sj2*x1398))+((sj2*x1402))+(((-1.0)*j7*x1396*x1399))+((cj2*pz))+(((-1.0)*x1396*x1404))+(((1.1e-7)*cj4)));
evalcond[7]=((-0.1515)+(((-1.1e-7)*x1403))+(((-1.0)*j7*x1394))+(((0.07042834)*x1408))+(((-1.0)*r02*x1398))+(((-1.0)*cj3*x1405))+((cj1*px))+(((-0.078)*cj3))+(((0.00025)*sj3))+((py*sj1))+(((-1.0)*x1403*x1409)));
evalcond[8]=((((-0.00025)*cj3))+(((-1.0)*j7*x1392*x1399))+(((-0.078)*sj3))+((sj2*x1395))+((cj2*r12*x1398))+(((-1.0)*x1392*x1404))+(((-0.07042834)*x1406))+(((-1.0)*x1397*x1409))+(((-1.1e-7)*x1397))+((cj2*x1402))+(((-1.0)*sj3*x1405))+(((-1.0)*pz*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
vinfos[5].jointtype = 17;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - cool400_description (66e4cd8abfaf9005cd8265dce08b5428)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
